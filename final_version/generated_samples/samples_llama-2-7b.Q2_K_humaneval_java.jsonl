{"task_id": "Java/0", "generation": "        if (numbers == null || numbers.isEmpty()) return false;\n        \n        Map map = new HashMap();\n        for (int i=0;i<numbers.size();++i){\n            String s = \"\"+numbers.get(i);\n            int index = s.indexOf('e');\n            if(index>-1 && Double.parseDouble(s.substring(0, index)) > threshold) {\n                map.put(numbers.get(i), Integer.valueOf(\"\"+map.get(numbers.get(i)))+1);\n            } else  map.put(numbers.get(i), Integer.valueOf(\"\"+map.get(numbers.get(i))));\n        }\n        \n        List<Map.Entry> elements = new ArrayList(map.entrySet());\n        Collections.sort(elements, new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                Map.Entry entry1 = (Map.Entry)o1;\n                Map.Entry entry2 = (Map.Entry)o2;\n                return Double.compare(entry1.getValue(), entry2.getValue());  \n            }\n        });\n        \n        int index = 0;\n        boolean flag=false;\n        while (index<elements.size() && !flag){\n            \n            String s1 = \"\"+elements.get(index).key;\n            map = new HashMap();\n            for (int j=index-i;j>=0;j--){\n                String s2 =\"\"+elements.get(j).key;\n                int index2 = s2\n"}
{"task_id": "Java/1", "generation": "        //Write your code here\n        ArrayList<String> result = new ArrayList<String>();;\n        String temp;\n        List<String> res =  new LinkedList<>();\n        //temp = paren_string.replace(\") \", \"\");\n         for(int i=0;i<=paren_string.length()-1;i++){// i<=(length(str)-1)\n             if(paren_string.charAt(i)!=\")\"&&paren_string.charAt(i+1)!=\"(\"){\n                 res.addAll((String[])paren_string.subList(i, i+2).stream().collect(Collectors.toList()));}\n             else{\n                 temp = paren_string.substring(0, paren_string.length()-1);\n                 if(!temp.equals(\"\")){\n                     res.addAll((String[])paren_string.subList(i+1, (paren_string).length()).stream().collect(Collectors.toList()));}\n             }\n         }\n        result=res;\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        BigDecimal big = new BigDecimal(String.valueOf(number));\n        BigDecimal int_part = big.setScale(0, BigDecimal.ROUND_DOWN);\n        \n        // we need decimal part of the number to be less than 1, so:\n        BigDecimal decimalPart = new BigDecimal(int_part).add(BigDecimal.ONE.subtract(new BigDecimal(String.valueOf(number))));\n        return decimalPart.doubleValue();\n    }\n}\n"}
