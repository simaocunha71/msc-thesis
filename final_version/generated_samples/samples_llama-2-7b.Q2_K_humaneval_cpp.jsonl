{"task_id": "CPP/0", "generation": "\tint counter = 0;\n\tfor (size_t i=1;i<numbers.size();++i) if (fabs(numbers[0] - numbers[i]) < 0.5) ++counter;\n\tif (counter > 0 && counter < numbers.size() / 2 ) return true ; else return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\tint curly_count = 0;\n\t//cur_index = 0\n\tfor(int i=0,j=0;i<(int)paren_string.size();i++){\n\t\tif(paren_string[i]=='('){\n\t\t\t++curly_count;\n\t\t}else if(paren_string[i]==')')){\n\t\t\tif(curly_count<2)break;\n\t\t\t--curly_count;\n\t\t}else if(paren_string[i]=='{'){\n\t\t\tj=0;\n\t\t\t++curly_count;\n\t\t}else{\n\t\t\tif(paren_string[i]!='(' && paren_string[i]!='{')break;\n\t\t\tcurly_count--;\n\t\t}\n\t}\n\treturn vector<string>(i,j);\n}\nint main(){\n\tvector<string> groups = separate_paren_groups(\"( ) (( )) (( )( ))\");\n\tfor_each(vec_begin(groups), vec_end(groups), cout<<\"Group: \"<<\\\ncout<<group_name(i,groups)<<\" is of Length: \"+to_string(group_size(i,groups)))<<endl;// prints ( ), (( ) , )()\n}\n"}
{"task_id": "CPP/2", "generation": "\tint part = (int)(number);\n\treturn float(floor(part));\n}\n"}
