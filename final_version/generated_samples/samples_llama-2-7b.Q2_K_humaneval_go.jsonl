{"task_id": "Go/0", "generation": "    if len(numbers) < 2 {\n        return false\n    }\n    for i := 0; i < len(numbers); i++ {\n        for j, n := range numbers[1 : len(numbers)-1] {\n            if distSquared(n, numbers[i]) >= threshold*threshold && !math.IsNaN(distSquared(n, numbers[i])) {\n                return true\n            }\n        }\n    }\n    // Not found.\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "    var output []string\n    for i, c := range paren_string {\n        switch c {\n          case ')':\n            if i == 0 {\n                break\n             }\n         }\n        switch c {\n          case '(':\n           if i == 0 {\n              continue\n           } else {\n               output = append(output,paren_string[:i])\n               break\n           }\n       case ')':\n            output = append(output,paren_string[:i])\n            \n         default:\n          }\n    }\n  return output\n}\n"}
{"task_id": "Go/2", "generation": "    if math.IsNaN(number) || math.IsInf(number,1)||math.IsInf(number,-1){\n        return number\n    }else{\n        if number < math.MaxFloat64-1 && number >= 0 {\n            return float64(int64_t(number)) - 1\n        }else if number > math.MaxFloat64+1 && number <= math.MaxFloat64/2 {\n            return (float64(int64_t(math.MaxFloat64))) + int64_t(number)\n        }else{\n            return float64(int64_t(number)) - 1\n        }\n    }\n}\n"}
