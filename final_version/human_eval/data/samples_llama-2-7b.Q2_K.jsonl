{"task_id": "HumanEval/0", "completion": "'from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if not numbers:\n        return False\n    min_nums = [(i, j) for i, j in list(zip(numbers[:-1] + [float('\"'\"'inf'\"'\"')]) if float('\"'\"'inf'\"'\"') != float(j)]\n                  for (i, j) in min_nums]\n    max_nums = [(f - inf) for f in numbers[1:] if not float('\"'\"'inf'\"'\"') == float(f)]\n\n    nums_diffs = []\n    for min, max in zip(min_nums[:-1], max_nums):\n        diff = abs(max - min)\n        if len(nums_diffs) > 0 and diff < (nums_diffs[-1] + 2 * threshold):\n            return True\n        nums_diffs.append(diff)\n    return False'"}
{"task_id": "HumanEval/1", "completion": "'from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('\"'\"'( ) (( )) (( )( ))'\"'\"')\n    ['\"'\"'()'\"'\"', '\"'\"'(())'\"'\"', '\"'\"'(()())'\"'\"']\n    \"\"\"\n\n    return [str(s) for s in re.findall(r\"(((?:[^()]+)|(?:){2})+)\", str(paren_string))]\n'"}
{"task_id": "HumanEval/2", "completion": "'\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return math.trunc(number)\n\ndef main() -> None:\n\n    print(\"Hello World!\")'"}
{"task_id": "HumanEval/3", "completion": "'from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You'\"'\"'re given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    # if balance is not zero then it will be too big as soon as first operation happens\n    # or if we'\"'\"'re left with an amount of money to pay for the operations that have been performed.\n    def get_balance(operations: List[int]) -> int:\n        \"\"\"\n        It just calculates balance, assuming it was zero before any operations happened.\n        \"\"\"\n        # balace can never be negative, because at least one operation will set the amount to 0\n        if not operations:\n            return 0\n        elif len(operations) > 1 and (operations[-1] < 0 or operations[0] < 0):\n            return get_balance([-operations[-1], -operations[0]])\n        else:\n            return operations[-1] if operations else 0'"}
{"task_id": "HumanEval/4", "completion": "'from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(x) for x in numbers) / len(numbers)\n'"}
{"task_id": "HumanEval/5", "completion": "'from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number '\"'\"'delimeter'\"'\"' between every two consecutive elements of input list `numbers'\"'\"'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for num in numbers:\n        if not isinstance(num, int): continue\n        if len(result) == 0 or \\\n           (not is_divisible(result[-1], 4) and not is_divisible(num, 4)):\n            result.append(num + delimeter)\n        else:\n            result[-1] += delimeter\n    return sorted(result)\n'"}
{"task_id": "HumanEval/6", "completion": "'from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('\"'\"'(()()) ((())) () ((())()())'\"'\"')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split(\" \")\n    level: int = 0  # Current level of nesting\n    output_list: List[int] = []\n    nested_levels: List[int] = [level]\n    for paren in groups:\n        if paren == \"()\":\n            pass\n        elif paren == \"{}:\":\n            level += 1\n            nested_levels.append(level)\n        else:\n            output_list.append(nested_levels[-1] - level + 1)\n    return output_list\n\nif __name__ == \"__main__\":\n    print(\"Hello World!\")'"}
{"task_id": "HumanEval/7", "completion": "'from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], '\"'\"'a'\"'\"')\n    []\n    >>> filter_by_substring(['\"'\"'abc'\"'\"', '\"'\"'bacd'\"'\"', '\"'\"'cde'\"'\"', '\"'\"'array'\"'\"'], '\"'\"'a'\"'\"')\n    ['\"'\"'abc'\"'\"', '\"'\"'bacd'\"'\"', '\"'\"'array'\"'\"']\n    \"\"\"\n    return [str for str in strings if substring in str]\n'"}
{"task_id": "HumanEval/8", "completion": "'from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    return sum(numbers), reduce(lambda x, y: x * y for x in numbers, 1)\n'"}
{"task_id": "HumanEval/9", "completion": "'from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    current_max = None\n    maxes: List[int] = []\n\n    for idx in range(len(numbers)):\n        if not current_max:\n            current_max = numbers[idx]\n        elif current_max <= numbers[idx]:\n            continue\n        else:\n            curr_max = current_max\n            maxes.append(curr_max)\n            current_max = numbers[idx]\n    if current_max != None and not (current_max == 0):\n        maxes.append(current_max)\n\n    return maxes\n'"}
{"task_id": "HumanEval/10", "completion": "'\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('\"'\"''\"'\"')\n    '\"'\"''\"'\"'\n    >>> make_palindrome('\"'\"'cat'\"'\"')\n    '\"'\"'catac'\"'\"'\n    >>> make_palindrome('\"'\"'cata'\"'\"')\n    '\"'\"'catac'\"'\"'\n    \"\"\"\n    if not string:\n        return '\"'\"''\"'\"'\n    # 0. Add all suffixes of supplied string to candidate list.\n    suffix_list = list(string)\n    while len(suffix_list) > 1:\n        prefix, suffix = pop_first_two_elements(suffix_list)\n        if is_palindrome(prefix):\n            yield '\"'\"''\"'\"'.join((prefix, suffix))\n    # 1. Find the longest palindromic string in suffixes of supplied string.\n    if len(suffix_list) >= 2:\n        max_len = min([len(s) for s in suffix_list])\n        for suffix in suffix_list[:-1]:\n            yield '\"'\"''\"'\"'.join((max_len - len(suffix), suffix))\n    # 2. Add to candidate list all prefixes of supplied string that are palindromic.\n    while not isempty(candidate_list):\n        prefix = pop_first_element(candidate_list)\n        if is_palindrome(prefix) and len(suffix_list) == 0:\n            yield prefix\n    raise ValueError('\"'\"'no palindromic string'\"'\"')\n'"}
