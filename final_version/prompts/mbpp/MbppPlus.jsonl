{"task_id": "Mbpp/2", "prompt": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n", "entry_point": "similar_elements", "canonical_solution": "\ndef similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [5, 4, 3, 7]], [[11, 12, 14, 13], [17, 15, 14, 13]]], "atol": 0, "plus_input": [[[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500], [100, 200, 400, 500]], [[10, 20, 30, 40, 50], [50, 60, 70, 80]], [[1, 2, 3, 4, 4, 5, 5], [4, 5, 6]], [[], [true, false, false, false, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 1], []], [["kx", "DHBNiditD"], [4, 5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[false, false, false, false, true], [false, false, false, false, false]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[false, false, false, false, false], [false, false, false, false, false]], [[], [5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[], [true, false, false, false]], [[4, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [["DRwvS", "FdzAtAvnsS", "ITntCqEvPi", "nlUsIhET", "ITntCqEvPi", "x"], [true, false, true, false, true, false, true]], [[1, 2, 20], []], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, false, false, false, false], [false, false, false, false]], [[1, 400, 3, 4, 4, 5, 5], [1, 400, 3, 4, 4, 5, 5, 5]], [[], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 60, 10, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [100, 200, 400, 500]], [["DRwvS", "ITntCqEvPi", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 2, 3], [1, 2, 3]], [[], [500, -45, 96, 22]], [[1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2]], [[5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [1, 2, 2, 3, 3, 4, 4, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 5, 6, 6, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[1, 2, 20], [1, 2, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[12, 2, 20], [1, 2, 19]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 20]], [[12, 2, 21], [12, 2, 20]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 12, 7, 8, 12, 0, 10, 10]], [[12, 2, 20, 20], [12, 2, 20]], [[6], [6]], [["LsgdJOGUO", "nsDO", "ceRuVEV", "BohovaWqz", "vovSNBB", "BohovaWqz"], [true, false, false]], [["DRwvS", "ITntCqEvPi", "SmJpP", "DRwvS"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"]], [[300, 1, 3, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, true, false, true, false, false, true, false, true], [false, true, false, true, false, false, true, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 3, 2, 3], [1, 3, 2, 3]], [[false, false, false, false, false], [false, false, false, false, true, false]], [["kx", "DHBNiditD", "DHBNiditD"], [4, 5, 6]], [[1, 1, 2, 3, 1], []], [[1, 2, 3, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, -45, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10]], [[26, true, 26.914534243589074, -44], []], [[11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15], [11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15]], [[300, 1, 3, 2, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[100, 201, 300, 400, 500], [100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[false, true, false, false], [false, false, false, false]], [[7, 1, 2, 3, 4, 4, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[4, 16, 5], [4, 5, 16, 5]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 4, 15, 16, 17, 19, 20, 15, 20]], [[7, 7], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3, 4], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [499, 200, 400, 500]], [[false, false, false, false, false, false], [false, false, false, false, false, false]], [[], [4, 6, 6]], [[4, 5, 6], [4, 4, 5, 6]], [[12, 2, 20, 20, 2], [12, 2, 20, 20]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 11], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[16, 1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[30.445411706111912, 18.10848826924409, 24.97646124690165, -55.873347006206544], [500, -45, 96, 22]], [[12, 2, 20], [12, 2, 20, 20]], [[2, 3], [1, 2, 3]], [[1, 3, 2, 3], [1, 3, 3]], [[12, 20], [12, 18, 20]], [[false, false, false, false, false], [false, true, false, false, false, false]], [[4, 6, 6, 4], [4, 6, 6]], [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 15, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16]], [[5, 5, 19, 6, 6, 7, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[5, 19, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [[-95.16136488545524, 8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[1, 2, 20, 2], [1, 2, 20]], [[false, false, false, false], [false, true, false, false]], [[1, 2, 3, 4, 4, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[false, false, false, false], [false, true, false, false, true]], [[1, 400, 3, 4, 4, 5, 5, 5, 3], [1, 400, 3, 4, 12, 4, 5, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "SmITntCqEvPiJpP", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 26, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[5, 19, 5, 16, 5, 5], [5, 19, 5, 6, 5]], [[1, 2, 3, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10]]], "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n"}
{"task_id": "Mbpp/3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "entry_point": "is_not_prime", "canonical_solution": "\nimport math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "base_input": [[1], [2], [10], [35], [37]], "atol": 0, "plus_input": [[7919], [10007], [524287], [7920], [true], [10006], [524288], [7921], [10008], [10005], [7918], [524289], [10004], [524286], [524290], [7922], [7923], [10009], [7917], [524285], [7916], [10003], [524284], [7924], [10010], [7915], [524283], [7925], [10011], [10002], [7914], [7926], [524291], [10012], [10001], [524292], [10000], [7927], [7928], [9999], [7929], [524293], [7913], [10013], [10014], [524282], [7912], [63], [9998], [62], [524281], [23], [64], [58], [60], [16], [59], [9997], [57], [10015], [61], [20], [56], [21], [7930], [55], [7911], [54], [19], [53], [9996], [524280], [22], [9995], [96], [9994], [7931], [10016], [524279], [97], [9993], [15], [94], [65], [93], [29], [66], [30], [92], [41], [95], [91], [14], [6], [524294], [4], [524278], [524277], [90], [524275], [5], [524295], [3]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n"}
