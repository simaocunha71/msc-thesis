{"task_id": "Mbpp/4", "prompt": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n", "entry_point": "heap_queue_largest", "canonical_solution": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "base_input": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5]], "atol": 0, "plus_input": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 7], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100], 6], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100, -70], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 9], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 7], [[10, 20, 30, 40, 50, 70, 80, 100], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 7], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 8], [[1000, 900, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 8], [[1, 3, 5, 6, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1, 3, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[70, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 9], [[8, 7, 6, 5, 4, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 4, 700, 800, 900, 1000], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 6], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 2], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 5], [[10, 20, 40, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 100], 9], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 10], [[8, 7, 6, 5, 5, 4, 2, 1], 2], [[1000, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 24], 6], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[9, 8, 7, 6, 4, 3, 2, 1], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 2], [[1, 3, 5, 7, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701], 4], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 10], [[10, 21, 30, 40, 50, 70, 80, 100], 3], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 701], 4], [[1, 3, 5, 25, 7, 9, 11, 13, 15, 16, 19, 21, 23, 25], 7], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[1000, 900, 90, 800, 700, 600, 500, 400, 300, 199, 701, 99], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 8], [[101, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[100, 200, 400, 500, 600, 800, 900, 1000], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 800, 100], 9], [[8, 7, 6, 5, 5, 4, 2, 0], 2], [[100, 200, 300, 400, 500, 599, 700, 800, 900, 1000], 1], [[1, 3, 5, 7, 21, 11, 13, 15, 17, 19, 21, 23, 25, 21], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6, 5], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25, 7], 7], [[1000, 900, 800, 700, 900, 600, 500, 400, 300, 199, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 40, 1000], 5], [[1, 23, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1000, 900, 800, 700, 600, 15, 500, 400, 300, 4, 100, 400], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11, 21], 7], [[8, 7, 6, 5, 4, 2, 1, 8], 2], [[1000, 900, 800, 400, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1000, 900, 800, 700, 600, 500, 400, 1001, 300, 200, 100], 9], [[1000, 8, 7, 6, 5, 4, 3, 99, 2, 1, 6], 9], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 9], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 9, 900, 13, 15, 17, 19, 21, 19, 25, 25, 7], 7], [[1, 3, 5, 6, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 7], 4], [[3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 13, 21, 1, 23, 25, 25, 11, 11], 8], [[100, 200, 400, 500, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 22, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 8, 9, 11, 17, 19, 21, 23, 40, 24, 25], 7], [[100, 200, 300, 400, 30, 600, 700, 800, 900, 1000], 4], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400, 900], 10]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
