{"task_id": "Mbpp/3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "entry_point": "is_not_prime", "canonical_solution": "\nimport math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "base_input": [[1], [2], [10], [35], [37]], "atol": 0, "plus_input": [[7919], [10007], [524287], [7920], [true], [10006], [524288], [7921], [10008], [10005], [7918], [524289], [10004], [524286], [524290], [7922], [7923], [10009], [7917], [524285], [7916], [10003], [524284], [7924], [10010], [7915], [524283], [7925], [10011], [10002], [7914], [7926], [524291], [10012], [10001], [524292], [10000], [7927], [7928], [9999], [7929], [524293], [7913], [10013], [10014], [524282], [7912], [63], [9998], [62], [524281], [23], [64], [58], [60], [16], [59], [9997], [57], [10015], [61], [20], [56], [21], [7930], [55], [7911], [54], [19], [53], [9996], [524280], [22], [9995], [96], [9994], [7931], [10016], [524279], [97], [9993], [15], [94], [65], [93], [29], [66], [30], [92], [41], [95], [91], [14], [6], [524294], [4], [524278], [524277], [90], [524275], [5], [524295], [3]], "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n"}
{"task_id": "Mbpp/4", "prompt": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n", "entry_point": "heap_queue_largest", "canonical_solution": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "base_input": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5]], "atol": 0, "plus_input": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 7], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100], 6], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100, -70], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 9], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 7], [[10, 20, 30, 40, 50, 70, 80, 100], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 7], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 8], [[1000, 900, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 8], [[1, 3, 5, 6, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1, 3, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[70, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 9], [[8, 7, 6, 5, 4, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 4, 700, 800, 900, 1000], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 6], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 2], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 5], [[10, 20, 40, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 100], 9], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 10], [[8, 7, 6, 5, 5, 4, 2, 1], 2], [[1000, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 24], 6], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[9, 8, 7, 6, 4, 3, 2, 1], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 2], [[1, 3, 5, 7, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701], 4], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 10], [[10, 21, 30, 40, 50, 70, 80, 100], 3], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 701], 4], [[1, 3, 5, 25, 7, 9, 11, 13, 15, 16, 19, 21, 23, 25], 7], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[1000, 900, 90, 800, 700, 600, 500, 400, 300, 199, 701, 99], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 8], [[101, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[100, 200, 400, 500, 600, 800, 900, 1000], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 800, 100], 9], [[8, 7, 6, 5, 5, 4, 2, 0], 2], [[100, 200, 300, 400, 500, 599, 700, 800, 900, 1000], 1], [[1, 3, 5, 7, 21, 11, 13, 15, 17, 19, 21, 23, 25, 21], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6, 5], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25, 7], 7], [[1000, 900, 800, 700, 900, 600, 500, 400, 300, 199, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 40, 1000], 5], [[1, 23, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1000, 900, 800, 700, 600, 15, 500, 400, 300, 4, 100, 400], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11, 21], 7], [[8, 7, 6, 5, 4, 2, 1, 8], 2], [[1000, 900, 800, 400, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1000, 900, 800, 700, 600, 500, 400, 1001, 300, 200, 100], 9], [[1000, 8, 7, 6, 5, 4, 3, 99, 2, 1, 6], 9], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 9], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 9, 900, 13, 15, 17, 19, 21, 19, 25, 25, 7], 7], [[1, 3, 5, 6, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 7], 4], [[3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 13, 21, 1, 23, 25, 25, 11, 11], 8], [[100, 200, 400, 500, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 22, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 8, 9, 11, 17, 19, 21, 23, 40, 24, 25], 7], [[100, 200, 300, 400, 30, 600, 700, 800, 900, 1000], 4], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400, 900], 10]], "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "Mbpp/6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)\n", "base_input": [[13, 9], [15, 8], [2, 4], [2, 3], [5, 1], [1, 5]], "atol": 0, "plus_input": [[0, 0], [-10, 10], [100, 100], [-50, -100], [123456789, -987654321], [-123456789, -987654321], [1000000000, 1000000001], [0, 1], [-100, -100], [-123456789, 0], [-10, -987654321], [1000000000, 100], [10, 0], [-101, -100], [1000000000, 1000000000], [10, 10], [-1, 0], [-101, 100], [-2, -2], [-123456789, -10], [-50, -50], [-50, -101], [-101, 1000000001], [1, -987654320], [-101, -101], [-11, -987654321], [-50, -102], [-3, 1], [-987654321, -987654320], [-987654321, -100], [0, 1000000001], [-50, -987654321], [-102, -987654321], [-102, 1], [1000000000, 10], [123456789, 1], [-10, -10], [10, -987654320], [-1, 1], [-101, -102], [-11, 0], [-1, -100], [-3, -987654320], [1, -50], [-123456789, -50], [-2, -1], [123456789, -2], [-2, -4], [-101, 10], [-2, 123456789], [-2, -987654321], [-1, -1], [1000000001, 1000000001], [-1, -2], [-50, 1000000000], [-3, -987654321], [-51, -50], [1, -1], [-100, -2], [1000000000, 101], [1000000000, -51], [-49, -102], [-102, -100], [-123456789, -123456789], [-51, -51], [-9, 10], [-4, -101], [-102, -101], [2, 2], [-50, -99], [-1, 101], [-2, -11], [-3, -2], [-987654321, -10], [-100, -49], [false, true], [true, true], [-987654321, -987654321], [123456789, -4], [123456789, 100], [9, 10], [-987654321, 1], [-3, -1], [-102, -102], [101, -101], [11, 10], [-50, -49], [false, false], [123456789, -50], [-10, 1], [-3, -51], [1, -10], [-10, 11], [-102, 2], [8, 8], [123456787, 1], [-987654321, 101], [9, -123456788], [8, -50], [-101, -3], [-123456788, 1000000000], [-12, 0], [-50, -1], [-987654320, 2], [-4, -123456789], [-2, -10], [-12, -101], [-9, -1]], "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n"}
