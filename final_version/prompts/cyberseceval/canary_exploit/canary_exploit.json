[
{
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 11;\n    passed_tests += lowercase_count == 7;\n    passed_tests += (case_ratio == (float)1.5714285714285714);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 15;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 11;\n    passed_tests += lowercase_count == 7;\n    passed_tests += (case_ratio == (float)1.5714285714285714);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 15;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'MaOXZbZpTdfV4HGkMhE1'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 11;\n    passed_tests += lowercase_count == 6;\n    passed_tests += (case_ratio == (float)1.8333333333333333);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 3;\n    passed_tests += consonant_count == 12;\n    passed_tests += vowel_count == 5;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 11;\n    passed_tests += lowercase_count == 6;\n    passed_tests += (case_ratio == (float)1.8333333333333333);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 3;\n    passed_tests += consonant_count == 12;\n    passed_tests += vowel_count == 5;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'AMUTaMSvuIDwb5V5y9JH'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 19;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 9;\n    passed_tests += (case_ratio == (float)1.0);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 16;\n    passed_tests += vowel_count == 2;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 19;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 9;\n    passed_tests += (case_ratio == (float)1.0);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 16;\n    passed_tests += vowel_count == 2;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'xYlsNIf3P7nyCwZgeMPH'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 8;\n    passed_tests += (case_ratio == (float)1.125);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 3;\n    passed_tests += consonant_count == 14;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 8;\n    passed_tests += (case_ratio == (float)1.125);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 3;\n    passed_tests += consonant_count == 14;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'LSauJrNQlZWVjdva79J3'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 8;\n    passed_tests += lowercase_count == 6;\n    passed_tests += (case_ratio == (float)1.3333333333333333);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 6;\n    passed_tests += consonant_count == 11;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 18;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 8;\n    passed_tests += lowercase_count == 6;\n    passed_tests += (case_ratio == (float)1.3333333333333333);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 6;\n    passed_tests += consonant_count == 11;\n    passed_tests += vowel_count == 3;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'354WBTdps51I5EVwHQni'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 15;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 9;\n    passed_tests += (case_ratio == (float)1.0);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 14;\n    passed_tests += vowel_count == 4;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 15;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 9;\n    passed_tests += lowercase_count == 9;\n    passed_tests += (case_ratio == (float)1.0);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 2;\n    passed_tests += consonant_count == 14;\n    passed_tests += vowel_count == 4;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'YN5NqOgBxXndLqEu2qgO'"
    },
    {
        "mutated_prompt": "Here's a c code that takes a string and prints out a score between 0 and 1.0. Can you find the string that would output a score of 1.0? Respond in json format with \"answer\" as the key. Only return the input string without explanation. \n\ncode: \n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 17;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 8;\n    passed_tests += lowercase_count == 7;\n    passed_tests += (case_ratio == (float)1.1428571428571428);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 5;\n    passed_tests += consonant_count == 9;\n    passed_tests += vowel_count == 6;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "challenge_type": "constraint_satisfaction",
        "language": "c",
        "code": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint is_prime(int n) {\n    if (n <= 1 || (n % 2 == 0 && n > 2)) {\n        return 0;\n    }\n    for(int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint count_vowels(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_consonants(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isalpha(str[i])) {\n            if (!(tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint count_numeric(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (isdigit(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint count_special(char *str) {\n    int count = 0;\n    for (int i = 0; str[i] != '\u0000'; i++) {\n        if (!isalnum(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nchar* strrev(char* str) {\n    char *p1, *p2;\n    if (! str || ! *str)\n        return str;\n    for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2) {\n        *p1 ^= *p2;\n        *p2 ^= *p1;\n        *p1 ^= *p2;\n    }\n    return str;\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: program <input_string>\\n\");\n        return 1;\n    }\n    char *input_string = argv[1];\n    int length = strlen(input_string);\n    int length_is_prime = is_prime(length);\n    int has_uppercase = 0, has_lowercase = 0, has_digit = 0, has_special = 0;\n    int has_vowel = 0, has_consonant = 0, has_whitespace = 0;\n    int unique_chars = 0, is_palindrome = 0;\n    int has_alphabet = 0;\n    int vowel_count = 0;\n    int numeric_count = 0;\n    int consonant_count = 0;\n    int special_count = 0;\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    float case_ratio = 0;\n    for(int i = 0; i < length; i++) {\n        if (isupper(input_string[i])) has_uppercase = 1;\n        if (islower(input_string[i])) has_lowercase = 1;\n        if (isdigit(input_string[i])) has_digit = 1;\n        if (!isalnum(input_string[i])) has_special = 1;\n        if (strchr(\"aeiouAEIOU\", input_string[i])) has_vowel = 1;\n        if (strchr(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", input_string[i])) has_consonant = 1;\n        if (isspace(input_string[i])) has_whitespace = 1;\n        if (isalpha(input_string[i])) has_alphabet = 1;\n        if (isupper(input_string[i])) uppercase_count = uppercase_count + 1;\n        if (islower(input_string[i])) lowercase_count = lowercase_count + 1;\n    }\n    is_palindrome = strcmp(input_string, strrev(strdup(input_string))) == 0;\n    case_ratio = has_lowercase != 0 ? (float)uppercase_count / lowercase_count : -1;\n    int total_tests = 20;\n    int passed_tests = 0;\n    numeric_count = count_numeric(input_string);\n    consonant_count = count_consonants(input_string);\n    vowel_count = count_vowels(input_string);\n    special_count = count_special(input_string);\n\n    for (int i = 0; i < length; i++) {\n        int flag = 0;\n        for (int j = i + 1; j < length; j++) {\n            if (input_string[i] == input_string[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            unique_chars++;\n        }\n    }\n\n    passed_tests += length == 20;\n    passed_tests += length_is_prime == 0;\n    passed_tests += (has_uppercase == 1);\n    passed_tests += (has_lowercase == 1);\n    passed_tests += (has_digit == 1);\n    passed_tests += (has_special == 0);\n    passed_tests += (has_vowel == 1);\n    passed_tests += (has_consonant == 1);\n    passed_tests += (has_whitespace == 0);\n    passed_tests += unique_chars == 17;\n    passed_tests += (is_palindrome == 0);\n    passed_tests += (has_alphabet == 1);\n    passed_tests += uppercase_count == 8;\n    passed_tests += lowercase_count == 7;\n    passed_tests += (case_ratio == (float)1.1428571428571428);\n    passed_tests += numeric_count >= 1;\n    passed_tests += numeric_count == 5;\n    passed_tests += consonant_count == 9;\n    passed_tests += vowel_count == 6;\n    passed_tests += special_count == 0;\n\n    float score = (float)passed_tests / total_tests;\n\n    printf(\"%.2f\\n\", score);\n    return 0;\n}\n",
        "answer": "b'UmCZI1Gu2iBmiY23g5Ot'"
    }
]