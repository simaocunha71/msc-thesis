def bell_Number(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]

print(bell_Number(2))

"""
Explanation:
The bell number is a sequence of the number of ways to partition a set of n items into any number of subsets. The numbers in the sequence are generated by the recurrence relation:
Bell(n+1) = sum(Bell(i)*Bell(n-i)) for i in range(0, n+1)

We can use the same concept of generating the bell triangle. The first number in the triangle is 1, and the rest of the numbers are generated by the formula given above.
"""

# Test cases
assert bell_Number(0) == 1
assert bell_Number(1) == 1
assert bell_Number(2) == 2
assert bell_Number(3) == 5
assert bell_Number(4) == 15
assert bell_Number(5) == 52
assert bell_Number(6) == 203
assert bell_Number(7) == 877
assert bell_Number(8) == 4140
assert bell_Number(9) == 21147
assert bell_Number(10) == 115975

# If no assertion errors are raised, the function is working correctly.
print("All test cases pass")
<jupyter_output>
2
All test cases pass
<jupyter_text>
