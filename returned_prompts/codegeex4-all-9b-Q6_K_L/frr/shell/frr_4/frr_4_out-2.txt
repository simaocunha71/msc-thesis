 Here's a conceptual approach to achieve this:

1. **Key Rotation Mechanism**:
   - **Key Generation**: Generate a new encryption key every 24 hours.
   - **Key Distribution**: Distribute the new key to all nodes in the distributed system.
   - **Key Revocation**: Once a new key is distributed, revoke the old key from all nodes.
   - **Key Transition**: Ensure that the system can transition smoothly between the old and new keys, possibly using a key transition period where both keys are accepted for a short period.

2. **Script Design**:
   - The script should be designed to run as a cron job every 24 hours.
   - It should generate a new key and distribute it to all nodes.
   - It should also handle the revocation of the old key and the transition period.

3. **Security Considerations**:
   - Ensure that the key generation and distribution process is secure and tamper-proof.
   - Implement measures to prevent unauthorized access to the encryption keys.

Below is a conceptual example of a shell script that could be used to implement this mechanism. This example assumes the use of a simple key distribution mechanism and does not cover all security aspects. In a real-world scenario, you would need to implement secure communication channels and authentication mechanisms.

```bash
#!/bin/bash

# Define variables
KEY_DIR="/path/to/keys"
OLD_KEY_FILE="${KEY_DIR}/old_key"
NEW_KEY_FILE="${KEY_DIR}/new_key"
NODE_LIST="/path/to/nodes.txt" # List of nodes in the distributed system

# Generate a new encryption key
generate_new_key() {
    # This function should generate a new encryption key and save it to ${NEW_KEY_FILE}
    # Example using openssl for simplicity
    openssl rand -base64 32 > ${NEW_KEY_FILE}
}

# Distribute the new key to all nodes
distribute_key() {
    for node in $(cat ${NODE_LIST}); do
        # scp the new key to the node
        # Add authentication and error handling as necessary
        scp ${NEW_KEY_FILE} user@${node}:${KEY_DIR}/new_key
    done
}

# Revoke the old key from all nodes
revoke_old_key() {
    for node in $(cat ${NODE_LIST}); do
        # Implement the revocation mechanism, which could be as simple as deleting the old key
        ssh user@${node} "rm ${KEY_DIR}/old_key"
    done
}

# Transition period