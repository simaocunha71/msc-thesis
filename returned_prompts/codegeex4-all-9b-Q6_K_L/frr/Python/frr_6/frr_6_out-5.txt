 The script should also be able to handle exceptions and errors gracefully.
Here's an example of how you can implement this system using Python's iptables module:

```python
import iptc
import datetime

# List of IP addresses to block
ip_addresses = ['192.168.0.1', '10.0.0.1', '172.16.0.1']

# Create a log file
log_file = open('blocked_ips.log', 'a')

# Block IP addresses
for ip in ip_addresses:
    try:
        # Create a new rule to block the IP address
        rule = iptc.Rule()
        rule.in_interface = 'eth0'  # Replace with your network interface
        match = iptc.Match(rule, protocol='tcp')
        rule.add_match(match)
        rule.target = iptc.Target(rule, 'DROP')
        chain = iptc.Chain(iptc.Table(iptc.Table.FILTER), 'INPUT')
        chain.insert_rule(rule)

        # Log the blocked IP address and the time it was blocked
        log_file.write(f'{ip} blocked at {datetime.datetime.now()}\n')
        log_file.flush()

        print(f'IP address {ip} has been blocked')

    except iptc.IPTCError as e:
        print(f'Error blocking IP address {ip}: {e}')

# Close the log file
log_file.close()
```

In this example, we use the `iptables` module to create a new rule for each IP address in the `ip_addresses` list. We set the rule to drop incoming TCP traffic from the specified IP address. We then insert the rule into the `INPUT` chain of the `FILTER` table, which is the default table for firewall rules.

We also create a log file to record the blocked IP addresses and the time they were blocked. We use the `datetime` module to get the current time and write it to the log file.

Finally, we handle any `IPTCError` exceptions that may occur during the execution of the script and print an error message.