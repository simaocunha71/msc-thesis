To solve this problem, we need to generate Fibonacci numbers and check if they are prime. The Fibonacci numbers are generated by adding the previous two numbers in the sequence. A number is prime if it is greater than 1 and has no divisors other than 1 and itself. 

Here's the solution to the problem:

```javascript
const isPrime = (num) => {
  if (num <= 1) return false;
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) return false;
  }
  return true;
}

const primeFib = (n) => {
  let fib1 = 1, fib2 = 1;
  let count = 0;
  while (count < n) {
    let fibNext = fib1 + fib2;
    fib1 = fib2;
    fib2 = fibNext;
    if (isPrime(fibNext)) count++;
  }
  return fib2;
}
```

In this solution, we first define a helper function `isPrime` to check if a number is prime. Then, we define the `primeFib` function that generates Fibonacci numbers and checks if they are prime. We use a while loop to generate Fibonacci numbers until we reach the n-th prime Fibonacci number. Finally, we return the n-th prime Fibonacci number.