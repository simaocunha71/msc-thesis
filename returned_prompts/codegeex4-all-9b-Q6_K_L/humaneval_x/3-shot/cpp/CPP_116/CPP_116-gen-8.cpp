
The first two problems are pretty straightforward. For the first, you're checking all pairs of numbers, so your nested loop is correct. The second problem, you're checking all pairs of parentheses, so your nested loop is correct.
The third problem is a bit trickier. You're looking for the decimal part of a floating point number, which is simply the remainder when you divide by 1. So, you can use the modulus operator % to find the decimal part.
The last problem is a bit more complex. You're given a vector of integers and you need to sort them based on the number of ones in their binary representation in ascending order. If two numbers have the same number of ones, you should sort them based on their decimal value. To do this, you can use the sort function with a custom comparator. The comparator should compare two numbers based on the number of ones in their binary representation. If two numbers have the same number of ones, it should compare their decimal value. You can find the number of ones in a number by counting the number of 1s in its binary representation. You can do this by iterating over the bits of the number and checking if they are 1. If two numbers have the same number of ones, you can compare their decimal value by subtracting them.