
First, I'd like to point out that you are using C++ but your code is written in C style.
It's not very hard to write C++ code, but there is one thing to keep in mind. In C++ you don't need to use semicolons at the end of each statement. If you want to write a function, you should use return type, function name, and parameters without semicolons, and then you write the function body inside curly brackets.
Second, I'd like to point out that your functions are not very descriptive. You should try to come up with better names that describe what each function does.
Third, your code doesn't have any comments. I know that you said you want to remove all comments from your code, but please consider adding comments to your code. It will make it easier for others to understand what your code does.
Fourth, your code doesn't have any error checking. If you want to write robust code, you should always check for errors. For example, if you are trying to read a file, you should always check if the file was opened successfully. If you are trying to allocate memory, you should always check if the memory was allocated successfully.
Fifth, your code doesn't have any documentation. If you want to write good code, you should always write documentation. Documentation should describe what each function does, what each parameter means, and what each return value means. It should also describe any side effects that the function has. If you are using a library, you should always read the documentation for that library.
Sixth, your code doesn't have any tests. If you want to write good code, you should always write tests. Tests should verify that your code is working as expected. If you are using a library, you should always write tests for that library.
Seventh, your code doesn't have any logging. If you want to write good code, you should always log what your code is doing. Logging should be used for debugging, but also for monitoring and alerting.
Eighth, your code doesn't have any error handling. If you want to write good code, you should always handle errors. Error handling should be used for debugging, but also for monitoring and alerting.
Ninth, your code doesn't have any exception handling. If