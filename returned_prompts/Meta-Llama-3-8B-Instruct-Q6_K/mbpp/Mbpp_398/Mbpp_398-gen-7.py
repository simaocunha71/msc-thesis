```
def sum_of_digits(lst):
    return sum(sum(int(i) for i in str(j)) for j in lst)
```



This function uses a generator expression to convert each number in the list to a string, then iterate over each character in the string (which is a digit), convert it back to an integer, and sum them up. The outer `sum` function then adds up these sums for each number in the list. For example, for the input [10,2,56], it will calculate the sum of digits for 10 (1+0=1), 2 (2), and 56 (5+6=11), and then return 1+2+11=14.  This function assumes that the input list contains only positive integers. If the list can contain negative integers or non-integer values, you may need to add error checking code.  The unit test `assert sum_of_digits([10,2,56])==14` helps to clarify the expected behavior of the function.  It's a good practice to write unit tests for your functions to ensure they behave as expected.  The unit test here is testing that the function returns 14 when given the input [10,2,56].  If the function is implemented correctly, it should pass this test.  If the function is not implemented correctly, it will fail the test.  This helps to catch and fix bugs early in the development process.  It's also a good idea to write unit tests for edge cases, such as an empty list or a list with a single element, to ensure the function behaves correctly in all situations.  For example, you might add the following unit tests: `assert sum_of_digits([])==0` and `assert sum_of_digits([42])==6`.  These tests ensure that the function returns 0 for an empty list and 6 for a list containing a single element 42.  With these tests, you can be confident that your function is working correctly for all possible inputs.  You can also use these tests to verify that your function is working correctly after you make changes to it.  This helps to ensure that your changes did not break the function.  It's a good practice to write unit tests for all of your functions and to run them whenever you make changes to your code.  This helps to ensure that your code is working correctly and to catch and fix bugs early in the development process.  It's also a good idea to write unit tests for other