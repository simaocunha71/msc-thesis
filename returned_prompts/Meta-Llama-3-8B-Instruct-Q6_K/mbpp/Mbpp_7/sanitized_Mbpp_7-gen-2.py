def find_char_long(s):
    words = s.split()
    return set(word for word in words if len(word) >= 4)  # or return [word for word in words if len(word) >= 4]
    # The set function is used to remove duplicates from the list of words. If you want to keep the words in the order they appeared in the string, you can use a list comprehension instead: return [word for word in words if len(word) >= 4]  # or return set(word for word in words if len(word) >= 4) for Python 3.7 and above.  # For Python 3.6 and below, you can use return list(set(word for word in words if len(word) >= 4))  # or return set(word for word in words if len(word) >= 4)  # If you want to sort the words, you can use return sorted(set(word for word in words if len(word) >= 4))  # or return sorted([word for word in words if len(word) >= 4])  # You can also use a for loop instead of a list comprehension or set comprehension: for word in words:     if len(word) >= 4:         result.append(word)     # result is a list.  # If you want to use a set instead of a list, you can use a set comprehension: result = {word for word in words if len(word) >= 4}  # result is a set.  # If you want to use a list and also sort the words, you can use: result = sorted([word for word in words if len(word) >= 4])  # result is a list.  # If you want to use a set and also sort the words, you can use: result = sorted({word for word in words if len(word) >= 4})  # result is a set.  # If you want to use a list and also sort the words and also remove duplicates, you can use: result = sorted(list(set(word for word in words if len(word) >= 4)))  # result is a list.  # If you want to use a set and also sort the words and also remove duplicates, you can use: result = sorted({word for word in words if len(word) >= 4})  # result is a set.  # If you want to use a list and also sort the words and also remove duplicates and