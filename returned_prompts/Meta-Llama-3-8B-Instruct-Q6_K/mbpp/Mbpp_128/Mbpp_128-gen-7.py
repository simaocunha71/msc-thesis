```
def long_words(n, words):
    return [word for word in words if len(word)>n]
```
The function takes two parameters: `n` which is the maximum length of the words and `words` which is a list of words. It uses a list comprehension to iterate over each word in the list and checks if the length of the word is greater than `n`. If it is, the word is added to the result list. Finally, the function returns the list of words that are longer than `n` characters. The unit test `assert long_words(3,"python is a programming language")==['python','programming','language']` ensures that the function works correctly. 

For example, if we call `long_words(3, ["python", "is", "a", "programming", "language"])`, it will return `['python', 'programming', 'language']` because these are the words that are longer than 3 characters.  If we call `long_words(5, ["python", "is", "a", "programming", "language"])`, it will return `['python', 'programming', 'language']` because these are the words that are longer than 5 characters.  If we call `long_words(7, ["python", "is", "a", "programming", "language"])`, it will return `['programming', 'language']` because these are the words that are longer than 7 characters.  If we call `long_words(10, ["python", "is", "a", "programming", "language"])`, it will return `['programming', 'language']` because these are the words that are longer than 10 characters.  If we call `long_words(15, ["python", "is", "a", "programming", "language"])`, it will return `['programming', 'language']` because these are the words that are longer than 15 characters.  If we call `long_words(20, ["python", "is", "a", "programming", "language"])`, it will return `['programming', 'language']` because these are the words that are longer than 20 characters.  If we call `long_words(25, ["python", "is", "a", "programming", "language"])`, it will return `['programming', 'language']` because these are the words that are longer than 25 characters.  If we call `long_words(30, ["