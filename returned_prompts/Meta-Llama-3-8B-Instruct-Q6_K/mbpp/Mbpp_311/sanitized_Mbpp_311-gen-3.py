def set_left_most_unset_bit(n):
    return n | (n & -n)  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 1 bit is the leftmost unset bit. This is because the rightmost 1 bit of n & -n is 1 and all other bits are 0. ORing this with n itself sets the leftmost unset bit in n to 1.  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 1 bit is the leftmost unset bit. This is because the rightmost 1 bit of n & -n is 1 and all other bits are 0. ORing this with n itself sets the leftmost unset bit in n to 1.  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 1 bit is the leftmost unset bit. This is because the rightmost 1 bit of n & -n is 1 and all other bits are 0. ORing this with n itself sets the leftmost unset bit in n to 1.  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 1 bit is the leftmost unset bit. This is because the rightmost 1 bit of n & -n is 1 and all other bits are 0. ORing this with n itself sets the leftmost unset bit in n to 1.  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 1 bit is the leftmost unset bit. This is because the rightmost 1 bit of n & -n is 1 and all other bits are 0. ORing this with n itself sets the leftmost unset bit in n to 1.  # This expression is a trick to set the leftmost unset bit. It works by finding the rightmost 1 bit in n and ORing it with n itself. The rightmost 