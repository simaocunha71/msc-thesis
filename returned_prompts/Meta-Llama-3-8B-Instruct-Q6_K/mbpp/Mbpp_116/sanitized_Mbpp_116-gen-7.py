def tuple_to_int(tup):
    return int("".join(map(str, tup)))
    # return int("".join(map(str, tup)))
    # return int(''.join(map(str, tup)))  # This is equivalent to the previous line. 
    # return int(''.join(map(str,tup)))  # This will also work. But it will not work if tuple contains 0. 
    # return int(''.join(map(str,tup)))  # This will also work. But it will not work if tuple contains 0. 
    # return int(''.join(map(str,tup)))  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work. But it will not work if tuple contains 0.  # This will also work.