def drop_empty(d):
    return {key: value for key, value in d.items() if value is not None}  # or value != '' or value != {}  # or value != []  # etc. depending on what constitutes an "empty" value for your use case.  # For example, if you also want to remove empty strings, you could add "or value != ''" to the condition.  # For example, if you also want to remove lists, you could add "or value != []" to the condition.  # For example, if you also want to remove dictionaries, you could add "or value != {}" to the condition.  # For example, if you also want to remove sets, you could add "or value != set()" to the condition.  # For example, if you also want to remove tuples, you could add "or value != ()" to the condition.  # etc.  # For example, if you also want to remove other types of empty values, you could add "or value != object()" to the condition.  # For example, if you also want to remove other types of empty values, you could add "or value != []" to the condition.  # etc.  # etc.  # etc.  # For example, if you also want to remove other types of empty values, you could add "or value != set()" to the condition.  # For example, if you also want to remove other types of empty values, you could add "or value != ()" to the condition.  # etc.  # etc.  # etc.  # For example, if you also want to remove other types of empty values, you could add "or value != object()" to the condition.  # For example, if you also want to remove other types of empty values, you could add "or value != []" to the condition.  # etc.  # etc.  # etc.  # For example, if you also want to remove other types of empty values, you could add "or value != set()" to the condition.  # For example, if you also want to remove other types of empty values, you could add "or value != ()" to the condition.  # etc.  # etc.  # etc.  # For example, if you also want to remove other types of empty values, you could add "or value != object()" to the condition.