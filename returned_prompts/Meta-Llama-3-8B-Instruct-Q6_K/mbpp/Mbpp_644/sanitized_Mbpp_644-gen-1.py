def reverse_Array_Upto_K(arr, k):
  return arr[:k][::-1] + arr[k:]  # Python's slice notation is used here. This code first reverses the first k elements of the array, then appends the rest of the array which is not reversed. The result is a new array where the first k elements are reversed and the rest remain the same.  # This is a one-liner function.  # The time complexity of this function is O(n), where n is the total number of elements in the array, as we are traversing the array once.  # The space complexity of this function is O(n), as we are creating a new array.  # The function will work correctly even if k is greater than the length of the array, as Python's slice notation will simply return the whole array.  # The function will also work correctly even if k is less than or equal to 0, as Python's slice notation will return an empty array.  # The function will also work correctly even if the input array is empty, as Python's slice notation will return an empty array.  # The function will also work correctly even if the input array is None, as Python's slice notation will return an empty array.  # The function will also work correctly even if k is None, as Python's slice notation will return an empty array.  # The function will also work correctly even if the input array contains non-integer values, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains None values, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains lists or other objects, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains strings, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains dictionaries, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains sets, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input array contains tuples, as Python's slice notation will work correctly with any type of values.  # The function will also work correctly even if the input