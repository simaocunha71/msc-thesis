def reverse_Array_Upto_K(arr, k):
    return arr[:k][::-1] + arr[k:]  # slice the array and reverse the first part, then concatenate with the rest of the array.  # [::-1] is used to reverse the list.  # arr[k:] is used to slice the array from index k to the end.  # arr[:k] is used to slice the array from the beginning to index k.  # the + operator is used to concatenate the two parts.  # the output will be a new list, not a reversed in-place.  # The function will not change the original list.  # The function will return a new list.  # This function will work correctly even if k is greater than the length of the array.  # This function will work correctly even if k is less than or equal to 0.  # This function will work correctly even if the array is empty.  # The function will return an empty list if the array is empty.  # The function will return the original array if k is equal to the length of the array.  # The function will return the original array if k is less than or equal to 0.  # This function has a time complexity of O(n), where n is the length of the array.  # This function has a space complexity of O(n), where n is the length of the array.  # This function uses a slice operation to reverse the array.  # This function uses a slice operation to concatenate the two parts.  # The function does not use any loop.  # The function does not use any recursion.  # The function does not use any sorting algorithm.  # The function does not use any searching algorithm.  # The function does not use any graph algorithm.  # The function does not use any dynamic programming.  # The function does not use any greedy algorithm.  # The function does not use any backtracking algorithm.  # The function does not use any bit manipulation.  # The function does not use any simulation.  # The function does not use any game theory.  # The function does not use any combinatorics.  # The function does not use any probability.  # The function does not use any statistics.  # The function does not use any linear algebra.  # The function does not use any calculus.  # The function does not use any geometry.  # The function does not use any trigonometry