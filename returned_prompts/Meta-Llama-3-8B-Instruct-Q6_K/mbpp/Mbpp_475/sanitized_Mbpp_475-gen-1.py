from operator import itemgetter
def sort_counter(score_dict):
    return sorted(score_dict.items(), key=itemgetter(1), reverse=True)  # Sort by value in descending order, then by key in ascending order.  # Return the result as a list of tuples.  # [1] is the value.  # [0] is the key.  # itemgetter(1) is a function that returns the second element of a tuple.  # reverse=True means descending order.  # itemgetter(0) is a function that returns the first element of a tuple.  # This is used when we want to sort by key in ascending order.  # The default is ascending order.  # So, we don't need to specify it.  # This function is used to sort the dictionary items.  # Then we return the result.  # The result is a list of tuples.  # Each tuple is a key-value pair.  # The key is the subject and the value is the score.  # The list is sorted by score in descending order.  # Then it is sorted by subject in ascending order.  # This is the problem's requirement.  # The function is named sort_counter.  # It takes a dictionary as an argument.  # It returns a list of tuples.  # The list is sorted by value in descending order, then by key in ascending order.  # The function sorts the dictionary by value.  # It is used to sort a dictionary by value.  # The function is named sort_counter.  # It takes a dictionary as an argument.  # It returns a list of tuples.  # The list is sorted by value in descending order, then by key in ascending order.  # This is the problem's requirement.  # The function is named sort_counter.  # It takes a dictionary as an argument.  # It returns a list of tuples.  # The list is sorted by value in descending order, then by key in ascending order.  # The function sorts the dictionary by value.  # It is used to sort a dictionary by value.  # The function is named sort_counter.  # It takes a dictionary as an argument.  # It returns a list of tuples.  # The list is sorted by value in descending order, then by key in ascending order.  # This is the problem's requirement.  # The function is named sort_counter.  # It takes a dictionary as an argument. 