```
def count_Set_Bits(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count
```
This function uses bitwise operations to count the number of set bits in a given number. The bitwise AND operation (`&`) is used to check if the least significant bit is set (1). If it is, the count is incremented. The bitwise right shift operation (`>>= 1`) is used to move the bits to the right, effectively dividing the number by 2 and removing the least significant bit. The process is repeated until all bits have been checked. The function returns the total count of set bits.  The unit test `assert count_Set_Bits(2) == 1` is used to verify the function's correctness. It checks if the count of set bits in the number 2 (which is 10 in binary) is indeed 1.  If the function is implemented correctly, this assertion should pass.  If not, the function may need to be revised.  The function is designed to be efficient and scalable, as it only requires a single pass through the bits of the number.  It is also easy to understand and modify, making it a good choice for this task.  Overall, the function is a good solution to the problem.  It is correct, efficient, and easy to understand.  It can be used to count the number of set bits in any number.  The function can be modified to count the number of set bits in a range of numbers by using a loop to iterate over the range and calling the function for each number in the range.  The function can also be used as a building block for more complex algorithms that require counting the number of set bits in a number.  The function is a good choice for this task because it is easy to understand and modify, it is efficient, and it is correct.  It can be used in a variety of applications where counting the number of set bits in a number is necessary.  The function is a good solution to the problem because it is correct, efficient, and easy to understand.  It is a good choice for this task because it is easy to understand and modify, it is efficient, and it is correct.  It can be used in a variety of applications where counting the number of set bits in a number is necessary.  The function is a good solution to the problem because it is correct, efficient, and easy to