def search(nums):
    for i in range(len(nums)):
        if i == len(nums) - 1 or nums[i] != nums[i+1]:
            return nums[i]
    return nums[-1]  # If all elements are duplicates, return the last element.  # This is a simple solution that works for the given constraints, but it may not be efficient for large arrays. For a more efficient solution, you could use a binary search algorithm.  # Python 3.8 and later versions support the assignment expression, which can be used to simplify the solution:  # def search(nums):  #     for i in range(len(nums)-1):  #         if nums[i] != nums[i+1]:  #             return nums[i]  #     return nums[-1]  # This function returns the first element that appears only once in the array. If all elements appear more than once, it returns the last element.  # It's worth noting that this function assumes that the input array is sorted. If the array is not sorted, the function may not work correctly.  # The function also assumes that the input array contains at least one element. If the array is empty, the function will raise an IndexError.  # In Python 3.7 and earlier versions, you can use a regular expression to solve this problem:  # import re  # def search(nums):  #     return re.search(r'(?<=^)(?!.*\1).', ' '.join(map(str, nums))).group(0)  # This function uses a regular expression to find the first element that appears only once in the array. The regular expression (?<=^)(?!.*\1). matches any character that is not followed by the same character. The function then joins the array elements into a string and searches for the first match.  # This function is not efficient for large arrays, as it uses a regular expression to search for the first match. The previous solution is more efficient for large arrays.  # The function also assumes that the input array is sorted. If the array is not sorted, the function may not work correctly.  # The function also assumes that the input array contains at least one element. If the array is empty, the function will raise an IndexError.  # It's worth noting that this function returns the first element that appears only once in the array. If all elements appear more than once, it returns the last element.  # The function could be modified to