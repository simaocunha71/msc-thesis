```
def highest_Power_of_2(n):
    if n <= 0:
        return 0
    power = 0
    while (1 << power) <= n:
        power += 1
    return (1 << (power - 1))
```
The function `highest_Power_of_2` takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`. 

The function first checks if `n` is less than or equal to 0. If it is, the function returns 0 because the highest power of 2 less than or equal to 0 is 0.

If `n` is greater than 0, the function uses a while loop to find the highest power of 2 that is less than or equal to `n`. The loop starts with `power` equal to 0 and continues as long as `2**power` is less than or equal to `n`. In each iteration of the loop, `power` is incremented by 1.

Once the loop ends, the function returns `2**(power - 1)`, which is the highest power of 2 that is less than or equal to `n`. This is because the last iteration of the loop set `power` to the value that satisfies `2**power > n`, so `2**(power - 1)` is the highest power of 2 that is less than or equal to `n`.

The unit test `assert highest_Power_of_2(10) == 8` ensures that the function returns the correct result for the input `10`. This test passes because the highest power of 2 that is less than or equal to 10 is 8. 














 
 







 
 







 





 







 







 







  














 







 







 







 







 







 







 







  







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







