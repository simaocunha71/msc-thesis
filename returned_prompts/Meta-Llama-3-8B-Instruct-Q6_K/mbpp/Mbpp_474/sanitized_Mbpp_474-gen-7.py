def replace_char(s, old, new):
  return s.replace(old, new)  # This function will replace all occurrences of 'old' with 'new' in the string 's'.  # For example, replace_char("polygon",'y','l') would return "pollgon".  # This function can be used to replace any character in a string.  # It works by using the built-in string method replace().  # The replace() method returns a copy of the string where all occurrences of a substring are replaced with another substring.  # It returns a copy of the string where all occurrences of 'old' are replaced with 'new'.  # This function is case sensitive.  # For example, replace_char("Polygon",'y','l') would not return "Pollgon".  # If you want a case insensitive replace, you would need to convert the string to lower or upper case before replacing.  # For example, replace_char("Polygon".lower(),'y','l') would return "pollgon".  # This function does not handle exceptions.  # If 'old' is not found in 's', the function would still return 's'.  # If 'new' is not a string, the function would still return 's'.  # If 's' is not a string, the function would raise a TypeError.  # If 'old' or 'new' is not a string, the function would raise a TypeError.  # This function is not thread safe.  # It does not handle the case where 'old' is an empty string.  # It does not handle the case where 'new' is an empty string.  # It does not handle the case where 'old' is equal to 'new'.  # It does not handle the case where 'old' is not found in 's'.  # It does not handle the case where 'new' is not a string.  # It does not handle the case where 's' is not a string.  # It does not handle the case where 'old' or 'new' is not a string.  # It is not thread safe.  # It does not handle exceptions.  # It does not handle the case where 'old' is an empty string.  # It does not handle the case where 'new' is an empty string.  # It does not handle the case where 'old' is equal to 'new'.  # It does not handle the case where 'old