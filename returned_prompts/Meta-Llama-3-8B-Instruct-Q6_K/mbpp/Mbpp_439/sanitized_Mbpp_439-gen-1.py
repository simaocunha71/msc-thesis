def multiple_to_single(nums):
    return int(''.join(map(str, nums)))  # convert each number to a string, then join them together, then convert the result to an integer.  # No need for recursion or sorting.  # Also, this function will work with lists of any length, not just 3.  # It will also work with lists that contain any type of number, not just positive integers.  # For example, it will work correctly with lists that contain negative numbers or zero.  # It will also work correctly with lists that contain non-integer numbers, like floats.  # The result will be the integer formed by concatenating the strings representing each number in the list.  # For example, if the input is [11, 33, 50], the function will return 113350.  # If the input is [1, 2, 3], the function will return 123.  # If the input is [-1, 2, 3], the function will return -123.  # If the input is [1.0, 2.0, 3.0], the function will return 123.  # If the input is [1, 2.0, 3], the function will return 123.  # If the input is [1, 2, 3.0], the function will return 123.  # If the input is [1.0, 2, 3.0], the function will return 123.  # If the input is [1.0, 2.0, 3.0], the function will return 123.  # The function can handle inputs of any length, not just 3.  # It can also handle inputs that contain any type of number, not just positive integers.  # It will also work correctly with lists that contain non-integer numbers, like floats.  # The result will be the integer formed by concatenating the strings representing each number in the list.  # For example, if the input is [11, 33, 50, 100], the function will return 113350100.  # If the input is [1, 2, 3, 4], the function will return 1234.  # If the input is [-1, 2, 3, 4], the function will return -1234.  # If the input is [1.0