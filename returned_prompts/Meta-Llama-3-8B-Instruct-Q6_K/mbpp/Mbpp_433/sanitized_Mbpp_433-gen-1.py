def check_greater(arr, num):
    return all(num <= i for i in arr)  # Check if num is less than all elements in the array. If true, return False. Else, return True.  # Here, the all() function returns True if all elements in the iterable are true. If at least one element is false, it returns False.  # The lambda function is used to define a small anonymous function. Here, it is used to check if the given number is less than the current element.  # The all() function applies this lambda function to all elements in the array and returns True if all elements satisfy the condition, else returns False.  # So, if the given number is greater than all elements in the array, the all() function returns False, and the function returns True. Else, it returns False.  # So, the function returns True if the given number is greater than all elements in the array, and False otherwise.  # The unit test check_greater([1, 2, 3, 4, 5], 4) == False confirms this. It checks if the given number 4 is greater than all elements in the array [1, 2, 3, 4, 5]. Since 4 is not greater than all elements, the function returns False.  # The unit test check_greater([1, 2, 3, 4, 5], 6) == True confirms this. It checks if the given number 6 is greater than all elements in the array [1, 2, 3, 4, 5]. Since 6 is greater than all elements, the function returns True.  # So, the function works correctly.  # This solution is optimal because it only needs to iterate over the array once. It does not need to iterate over the array multiple times or use complex data structures.  # This solution is efficient because it uses the built-in all() function, which is implemented in C. It does not need to use loops or recursion, which can be slower.  # This solution is simple because it uses the built-in all() function and lambda function, which are easy to understand and use. It does not need to use complex logic or multiple conditions.  # This solution is readable because it uses clear variable names and the all() function, which makes it easy to understand what the code is doing. It does not need to use complex variable names or multiple conditions.  #