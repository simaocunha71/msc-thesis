```
def count_element_in_list(lst, element):
    return sum(1 for sublist in lst if element in sublist)
```
The unit test `assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3` suggests that the function should count the number of sublists that contain the given element. This can be achieved by iterating over each sublist in the list and checking if the element is in the sublist. The `sum` function with a generator expression is used to count the number of sublists that contain the element.  If the element is in the sublist, the generator expression returns 1, and `sum` adds up these 1s to give the total count. If the element is not in the sublist, the generator expression returns 0, and `sum` adds up these 0s to give the total count.  Therefore, the function correctly counts the number of sublists that contain the given element.  For example, the function would return 3 for the input `[[1, 3], [5, 7], [1, 11], [1, 15, 7]]` and `1`.  This is because there are three sublists that contain the element 1.  The function would return 0 for the input `[[2, 3], [5, 7], [11, 15, 7]]` and `1`, because there are no sublists that contain the element 1.  The function would return 1 for the input `[[1, 3], [5, 7], [1, 11], [1, 15, 7]]` and `5`, because there is one sublist that contains the element 5.  The function would return 0 for the input `[[2, 3], [5, 7], [11, 15, 7]]` and `5`, because there are no sublists that contain the element 5.  The function would return 2 for the input `[[1, 3], [5, 7], [1, 11], [1, 15, 7]]` and `7`, because there are two sublists that contain the element 7.  The function would return 0 for the input `[[2, 3], [5, 7], [11, 15