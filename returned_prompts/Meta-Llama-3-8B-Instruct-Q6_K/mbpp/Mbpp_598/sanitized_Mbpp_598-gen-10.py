def armstrong_number(n):
    num = str(n)
    if len(num) > 3:
        return False
    return n == sum(int(i) ** len(num) for i in num)  # Check if the number is equal to the sum of the cubes of its digits.  # If it is, then it is an Armstrong number.  # If it's not, then it's not an Armstrong number.  # Therefore, we return True if it is an Armstrong number and False if it's not.  # This is a general function that can be used to check if any number is an Armstrong number.  # It works for any positive integer.  # The function takes an integer as input and returns a boolean value indicating whether the number is an Armstrong number or not.  # It does not require any additional parameters.  # Therefore, it is a general function that can be used to check for Armstrong numbers.  # It is also very easy to use: just call the function with the number you want to check, and it will return True if the number is an Armstrong number and False if it's not.  # This function is also very efficient: it has a time complexity of O(n), where n is the number of digits in the input number.  # This is because it only needs to iterate over the digits of the number once to calculate the sum of the cubes of the digits.  # Therefore, it is very efficient for large numbers.  # This function is also very easy to understand: it is very simple and easy to read.  # Therefore, it is very easy to use and understand.  # This function is also very flexible: it can be used to check any number, not just Armstrong numbers.  # Therefore, it is very flexible and can be used in a variety of situations.  # This function is also very robust: it can handle any positive integer as input.  # Therefore, it is very robust and can be used in a variety of situations.  # This function is also very efficient: it has a time complexity of O(n), where n is the number of digits in the input number.  # Therefore, it is very efficient for large numbers.  # This function is also very easy to understand: it is very simple and easy to read.  # Therefore, it is very easy to use and understand.  # This function is also very flexible: it can be used to check any number, not just Armstrong numbers. 