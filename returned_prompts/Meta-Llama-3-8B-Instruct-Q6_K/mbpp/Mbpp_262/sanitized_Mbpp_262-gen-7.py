def split_two_parts(lst, L):
    return tuple(lst[:L], lst[L:]) if L <= len(lst) else (lst, [])  # Check if L is within the list's length, if not, split the list in two parts.  # If L is within the list's length, split the list at index L.  # Return a tuple of the two parts.  # If L is greater than the list's length, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is equal to the list's length, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is less than 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is equal to 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is greater than the list's length, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is less than 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is equal to 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is greater than the list's length, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is less than 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is equal to 0, return the list as the first part and an empty list as the second part.  # Return a tuple of the list and the empty list.  # If L is greater than the list's length, return the list as the first part and an empty list as the second part.  # Return a tuple of the