```
def last_Digit(n):
    return n % 10
```
This function uses the modulus operator `%` to find the remainder of the division of `n` by `10`. The remainder is the last digit of the number. For example, `123 % 10` is `3`, so `last_Digit(123)` returns `3`.  This function works for any integer `n`.  If `n` is negative, it will return the last digit of the absolute value of `n`.  For example, `last_Digit(-123)` returns `3`.  If `n` is a float, it will return the last digit of the integer part of `n`.  For example, `last_Digit(123.456)` returns `3`.  If `n` is a string, it will raise a TypeError.  For example, `last_Digit('123')` raises `TypeError: unsupported operand type(s) for %: 'str' and 'int'`.  If `n` is a complex number, it will raise a TypeError.  For example, `last_Digit(123+4j)` raises `TypeError: unsupported operand type(s) for %: 'complex' and 'int'`.  If `n` is a list or a tuple, it will raise a TypeError.  For example, `last_Digit([1, 2, 3])` raises `TypeError: unsupported operand type(s) for %: 'list' and 'int'`.  If `n` is a dictionary, it will raise a TypeError.  For example, `last_Digit({'a': 1, 'b': 2})` raises `TypeError: unsupported operand type(s) for %: 'dict' and 'int'`.  If `n` is a set, it will raise a TypeError.  For example, `last_Digit({1, 2, 3})` raises `TypeError: unsupported operand type(s) for %: 'set' and 'int'`.  If `n` is a frozenset, it will raise a TypeError.  For example, `last_Digit(frozenset({1, 2, 3}))` raises `TypeError: unsupported operand type(s) for %: 'frozenset' and 'int'`.  If `n` is a bytes object, it will raise a TypeError.  For example, `last_Digit(b'