def nth_nums(nums, n):
    return [x**n for x in nums]  # Use list comprehension to create a new list where each element is the nth power of the corresponding element in the input list.  # The ** operator is used to compute the power.  # For example, 2**3 equals 8.  # This function can be used to compute the nth power of each number in a list.  # For example, nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2) returns [1, 4, 9, 16, 25, 36, 49, 64, 81, 100].  # This function can be used for any list of numbers and any value of n.  # For example, nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3) returns [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000].  # The time complexity of this function is O(n) and the space complexity is also O(n), where n is the number of elements in the input list.  # This function can be used to compute the nth power of each number in a list.  # The function uses list comprehension to create a new list where each element is the nth power of the corresponding element in the input list.  # The ** operator is used to compute the power.  # This function can be used for any list of numbers and any value of n.  # The function has a time complexity of O(n) and a space complexity of O(n), where n is the number of elements in the input list.  # This function is useful for computing the nth power of each number in a list.  # It can be used in a variety of applications where the nth power of each number in a list needs to be computed.  # For example, it can be used to compute the nth power of each number in a list of numbers that represents the area of each square in a grid.  # It can also be used to compute the nth power of each number in a list of numbers that represents the volume of each cube in a grid.  # This function is a useful tool for computing the nth power of each