```
def remove_odd(lst):
    return [i for i in lst if i % 2 == 0]
``` 

This function uses a list comprehension to create a new list that only includes the numbers from the original list that are even (i.e., the remainder when divided by 2 is 0). The function then returns this new list.

For example, if the input is [1,2,3], the function will return [2], which is the only even number in the list.

The unit test `assert remove_odd([1,2,3]) == [2]` ensures that the function works correctly for this specific input. If the function is implemented correctly, this test will pass. If the function is implemented incorrectly, this test will fail.  This helps to ensure that the function is working as expected.  It is a good practice to include unit tests in your code to help ensure that it is working correctly.  This can help to catch bugs and make it easier to debug your code.  It also makes it easier to change the code in the future without introducing bugs.  For example, you might want to add a new feature to the function, or change the way it works.  With unit tests, you can be sure that the function still works correctly after making these changes.  This helps to make your code more reliable and easier to maintain.  It also makes it easier to understand how the code works, because you can see how it is supposed to behave, and you can test it to make sure it is working correctly.  This is especially important for complex code, because it can be difficult to understand how it works just by reading it.  Unit tests can help to clarify how the code works, and make it easier to understand and maintain.  They can also help to ensure that the code is working correctly, and catch bugs before they cause problems.  This can help to make your code more reliable, and easier to maintain.  It can also help to make your code more efficient, by catching bugs early, and making it easier to debug.  This can help to make your code more efficient, and easier to understand.  It can also help to make your code more maintainable, by making it easier to understand, and catch bugs early.  This can help to make your code more maintainable, and easier to understand.  It can also help to make your code more efficient, by making it easier to debug, and catch bugs early.  This can help