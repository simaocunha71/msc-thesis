```
def count_integer(lst):
    return sum(isinstance(i, int) for i in lst)
```
This function uses a generator expression to iterate over the list and check if each element is an instance of the `int` class using the `isinstance()` function. The `sum()` function is then used to count the number of `True` values returned by the generator expression, effectively counting the number of integer elements in the list.  The unit test `assert count_integer([1,2,'abc',1.2]) == 2` suggests that the function should return `2` for the given input list, which is the expected output.  The function should work correctly for lists with any number of integer elements.  For example, `count_integer([1,2,3,4,5])` should return `5`, and `count_integer([1,2,'abc',1.2,3,4,5])` should return `4`.  The function will also work correctly if the list contains non-integer elements that can be converted to integers, such as floats.  For example, `count_integer([1,2,3,4,5.6])` should return `5`.  The function will also work correctly if the list contains non-integer elements that cannot be converted to integers, such as strings.  For example, `count_integer([1,2,'abc',3,4,5])` should return `4`.  The function will also work correctly if the list is empty.  For example, `count_integer([])` should return `0`.  The function will also work correctly if the list contains a mix of integer and non-integer elements.  For example, `count_integer([1,2,3,'abc',4,5])` should return `5`.  The function will also work correctly if the list contains the same integer element multiple times.  For example, `count_integer([1,2,1,3,4,1])` should return `3`.  The function will also work correctly if the list contains the same non-integer element multiple times.  For example, `count_integer([1,2,'abc','abc',4,5])` should return `2`.  The function will also work correctly if the list contains a mix of integer and non-integer elements, and the same integer element multiple times.  For example, `count_integer([1,2,1,'abc','