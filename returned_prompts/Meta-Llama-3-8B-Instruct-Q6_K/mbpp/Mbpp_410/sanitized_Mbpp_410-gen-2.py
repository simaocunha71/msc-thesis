def min_val(lst):
    return min(i for i in lst if isinstance(i, (int, float)))  # Use a generator expression to filter out non-int/float values and find the minimum. The isinstance() function is used to check if an object is an instance or subclass of a class. In this case, it's used to filter out strings and other non-numeric types. The min() function then returns the smallest item from the remaining list. If the list is empty, it raises a ValueError. You could handle this case by returning a default value (e.g., None or a special "not found" value).  # For example, you can handle the case where the list is empty like this: if not lst: return None  # Add this line before the return statement.  # So the final function would be: def min_val(lst): if not lst: return None return min(i for i in lst if isinstance(i, (int, float)))  # Now, the function will return None if the list is empty.  # Now, the function will return None if the list is empty.  # If you want to return a specific value instead of None, you can replace the return None statement with the value you want.  # For example, you could return the string 'not found' if the list is empty.  # So the final function would be: def min_val(lst): if not lst: return 'not found' return min(i for i in lst if isinstance(i, (int, float)))  # Now, the function will return 'not found' if the list is empty.  # You can replace 'not found' with any value you want.  # Now, the function will return 'not found' if the list is empty.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value you want.  # You can replace 'not found' with any value