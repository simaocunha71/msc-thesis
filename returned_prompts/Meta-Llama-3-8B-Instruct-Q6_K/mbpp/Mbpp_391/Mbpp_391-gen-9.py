```
def convert_list_dictionary(keys, values, scores):
    return [{key: {value: score}} for key, value, score in zip(keys, values, scores)]
```


This function takes three lists as input: keys, values, and scores. It uses the zip function to iterate over these lists in parallel, creating a dictionary for each set of key-value-score. The result is a list of dictionaries, each of which has a single key-value pair. The unit test provided ensures that the function works correctly for the given example.  For example, the test case `assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]` checks that the function correctly converts the input lists into the expected output.  The function works by iterating over the input lists using the zip function, creating a dictionary for each set of key-value-score, and returning the list of dictionaries.  This allows it to handle any number of input lists and to create a nested dictionary for each set of key-value-score.  The unit test provided ensures that the function works correctly for the given example, and it can be used to test the function with different input lists.  If the function is called with lists of different lengths, it will stop at the end of the shortest list, so the function will work correctly even if the input lists have different lengths.  The function does not perform any error checking, so it will throw an error if the input lists are empty or if they do not have the same length.  However, the unit test provided ensures that the function works correctly for the given example, and it can be used to test the function with different input lists.  The function could be modified to perform error checking and to handle input lists of different lengths, but this would require additional code and would make the function more complex.  The function is simple and easy to use, and it works correctly for the given example, so it is suitable for use in a variety of situations.  It is a good solution to the problem of converting more than one list to a nested dictionary.  The