```
def count(lst):
    return lst.count(True)
``` 

This function takes a list as an argument and returns the count of True booleans in the list. The built-in list method `count()` is used to achieve this. The unit test `assert count([True,False,True]) == 2` ensures that the function returns the correct count. 

Note: This function will only count the exact boolean value `True`, not any other object that evaluates to `True` (like integers, strings, etc.). If you need to count all truthy values, you would need to use a different approach.  For example, you could use a generator expression: `return sum(1 for x in lst if x)` . This would count all objects that evaluate to `True`, not just the exact boolean value `True`.  However, the problem statement and the provided unit test suggest that only the exact boolean value `True` should be counted.  In that case, the original solution is correct.  If you need to count all truthy values, you would need to adjust the solution accordingly.  For example, you could use the following function: `def count(lst): return sum(1 for x in lst if x)`. This would count all objects that evaluate to `True`, not just the exact boolean value `True`.  However, the problem statement and the provided unit test suggest that only the exact boolean value `True` should be counted.  In that case, the original solution is correct. 

This solution is simple, efficient, and easy to understand. It uses the built-in list method `count()` which is specifically designed for this task. It has a time complexity of O(n), where n is the length of the list, because it needs to iterate over the entire list to count the occurrences of `True`. It also has a space complexity of O(1), because it only uses a constant amount of space to store the result.  Therefore, it is an efficient solution for this problem.  The unit test `assert count([True,False,True]) == 2` ensures that the function returns the correct count, which is 2 in this case.  This unit test covers the most common use case, where the list contains a mix of `True` and `False` values.  If the list only contains `True` values, the function will still work correctly.  If the list only contains `False` values, the function will return 0, which is also correct.