```
def check_element(lst, element):
    return all(item == element for item in lst)
```
This function uses the built-in `all` function and a generator expression to check if all items in the list are equal to the given element. The `all` function returns `True` if all elements of the iterable (in this case, the generator expression) are true. The generator expression `item == element for item in lst` checks each item in the list to see if it is equal to the given element. If any item is not equal to the element, the `all` function will return `False`. If all items are equal to the element, the `all` function will return `True`. 

For example, `check_element(["green", "orange", "black", "white"],'blue')` returns `False` because none of the items in the list are equal to `'blue'`. 

The unit test `assert check_element(["green", "orange", "black", "white"],'blue')==False` ensures that the function returns the correct result for this input.  It checks whether the function returns `False` when the list contains items that are not equal to the given element. If the function returns `True` instead, the unit test will fail.  This helps to ensure that the function is working correctly. 

The time complexity of this function is O(n), where n is the number of items in the list, because it needs to iterate over all items in the list to check if they are equal to the given element. The space complexity is O(1), because it only uses a constant amount of space to store the variable `element` and the generator expression.  Therefore, this function is efficient for large lists.  It also handles lists of any type of elements, not just numbers.  For example, it can check if all items in a list of strings are equal to a given string.  It can also check if all items in a list of lists are equal to a given list.  It can even check if all items in a list of custom objects are equal to a given object, as long as the objects are comparable.  This makes it a versatile function that can be used in a wide range of situations.  It also raises a `TypeError` if the list contains items that are not comparable to the given element.  For example, if the list contains a string and an integer, the function will raise a `TypeError` when it tries to