def min_of_three(a, b, c):
    return min(a, b, c)  # Python's built-in min function can handle more than two arguments. It returns the smallest of the given arguments.  # You can also write your own function using if-else statements. For example: # def min_of_three(a, b, c): #     if a <= b and a <= c: #         return a #     elif b <= a and b <= c: #         return b #     else: #         return c  # But the above Python built-in function is more efficient and readable.  # It can also handle more than three numbers.  # For example, min(1,2,3,4,5) returns 1.  # This is because min function in Python is capable of handling variable number of arguments.  # You can use it to find the minimum of any number of arguments.  # So, this function is more flexible and useful.  # It can also be used to find the minimum of a list of numbers.  # For example, min([1,2,3,4,5]) returns 1.  # So, this function is very useful and can be used in many different situations.  # It can be used to find the minimum of any list of numbers.  # It can be used to find the minimum of any number of arguments.  # It can be used to find the minimum of any single number.  # It can be used to find the minimum of any list of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of lists of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of lists of lists of lists of lists of numbers.  # It can be used to find the minimum of any list of lists of lists of lists of lists of lists of lists of lists of lists of numbers.  # It can be used