def min_of_three(a, b, c):
    return min(a, b, c)  # This function uses the built-in min() function in Python, which returns the smallest item in an iterable or the smallest of two or more arguments.  # This function is case-insensitive and can handle lists, tuples, dictionaries, sets, or any other iterable.  # The function also supports multiple arguments.  # For example, min('P', 'P', 'x') returns 'x'.  # This is a simple and efficient solution for this problem.  # It is also easy to read and understand.  # It is a good practice to use the built-in functions in Python whenever possible, as they are efficient, well-tested, and easy to use.  # It is also a good practice to write tests for your functions, as it helps to ensure that your functions are working correctly.  # For example, the test assert min_of_three(10,20,0)==0 helps to ensure that the function is working correctly.  # It is also a good practice to document your functions, as it helps to make them easier to understand and use.  # For example, you can add a docstring to your function to describe what it does and how to use it.  # For example, you can add the following docstring to your function:  # """  # This function returns the minimum of three numbers.  # It takes three arguments, a, b, and c, and returns the smallest of the three.  # It is a simple and efficient solution for this problem.  # """  # This docstring helps to make the function easier to understand and use.  # It is a good practice to follow the PEP 8 style guide for Python, as it helps to make your code easier to read and understand.  # For example, you can add a blank line between the import statement and the function definition, as it helps to separate the import statement from the function definition.  # For example, you can add the following blank line to your code:  #  # This blank line helps to separate the import statement from the function definition.  # It is a good practice to follow the PEP 8 style guide for Python, as it helps to make your code easier to read and understand.  # For example, you can add a blank line between the function definition and the docstring, as it helps to separate the function definition from the docstring. 