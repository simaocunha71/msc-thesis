```
def split_Arr(arr, n):
    return arr[n:]+arr[:n]
```
This function uses Python's list slicing feature to split the list at the nth element and then concatenates the two parts in reverse order. The `+` operator is used to concatenate the lists. The `arr[n:]` expression gets all elements from the nth element to the end of the list, and the `arr[:n]` expression gets all elements from the start of the list up to the nth element. The order of these two expressions is swapped to put the first part at the end.  The unit test provided, `assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]`, ensures that the function works correctly. 

For example, if you call `split_Arr([12,10,5,6,52,36],2)`, it will return `[5,6,52,36,12,10]`, which is the input list split at the 2nd element and with the first part added to the end.  If you call `split_Arr([1,2,3,4,5,6],3)`, it will return `[4,5,6,1,2,3]`, which is the input list split at the 3rd element and with the first part added to the end.  This function works correctly for any list and any integer n.  It does not modify the original list, but returns a new list.  The time complexity is O(n), where n is the length of the list, because the function needs to iterate over the list to split it.  The space complexity is also O(n), because the function needs to store the split list.  The function is efficient and easy to use.  It can be used to solve a variety of problems that require splitting a list and rearranging its elements.  For example, you can use it to rotate a list, to reverse a list, or to implement a queue or stack data structure.  It is a versatile and powerful function.  It can be used in a variety of applications, such as data processing, scientific computing, or machine learning.  It is a fundamental tool in any programmer's toolkit.  It is easy to understand and use, and it is a great way to solve a variety of problems.  It is a must-know function for any