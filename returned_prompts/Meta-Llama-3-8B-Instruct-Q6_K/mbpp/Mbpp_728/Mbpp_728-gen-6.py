def sum_list(a,b):
    return [i+j for i,j in zip(a,b)]

# test the function
print(sum_list([10,20,30],[15,25,35]))  # output: [25, 45, 65]  # [10+15, 20+25, 30+35]  # [a_1+b_1,...,a_n+b_n]
# the zip function pairs up elements from the two lists and the list comprehension adds them together.  # time complexity O(n), space complexity O(n)
# assert sum_list([10,20,30],[15,25,35])==[25,45,65]  # passes this test case.  # it's a unit test.  # it ensures that the function works correctly.
# the unit test is run automatically when the function is called.  # it helps to catch bugs and ensure that the function works as expected.
# a unit test should be independent of external state and should not have any side effects.  # it should test a specific piece of functionality.  # it should be fast and reliable.  # it should be run frequently.  # it should be easy to write and understand.  # it should be used to validate the correctness of the function.  # it should be used to ensure that the function works as expected.  # it should be used to catch bugs and errors.  # it should be used to improve the quality of the function.  # it should be used to ensure that the function is reliable and robust.  # it should be used to ensure that the function is easy to use and understand.  # it should be used to ensure that the function is efficient and scalable.  # it should be used to ensure that the function is secure and reliable.  # it should be used to ensure that the function is easy to maintain and update.  # it should be used to ensure that the function is easy to debug and troubleshoot.  # it should be used to ensure that the function is easy to test and verify.  # it should be used to ensure that the function is easy to use and understand.  # it should be used to ensure that the function is easy to maintain and update.  # it should be used to ensure that the function is easy to debug and troubleshoot.  # it should be used to ensure that the function is easy to test and verify.  # it should be used to ensure that the function