def max_Product(nums):
    nums.sort()
    return (nums[-1], nums[-2]) if nums[-1]*nums[-2] > nums[-1]*nums[0] else (nums[0], nums[1])  # O(n log n) time complexity. This is because we have to sort the list first. The max product can be either the product of the two largest numbers or the product of the two smallest numbers in the list. If the product of the two largest numbers is greater than the product of the two smallest numbers, then we return the pair with the two largest numbers. Otherwise, we return the pair with the two smallest numbers. This ensures that we always return the pair with the highest product.  # O(n) space complexity. This is because we need to store the list of numbers in the function.  # O(n log n) time complexity. This is because we have to sort the list of numbers.  # O(n) space complexity. This is because we need to store the sorted list of numbers.  # O(1) time complexity. This is because we only need to access the last two elements of the list to return the pair with the highest product.  # O(1) space complexity. This is because we only need to store the pair with the highest product.  # O(n) time complexity. This is because we need to iterate over the list of numbers to find the pair with the highest product.  # O(1) space complexity. This is because we only need to store the pair with the highest product.  # O(n) time complexity. This is because we need to iterate over the list of numbers to find the pair with the highest product.  # O(1) space complexity. This is because we only need to store the pair with the highest product.  # O(n) time complexity. This is because we need to iterate over the list of numbers to find the pair with the highest product.  # O(1) space complexity. This is because we only need to store the pair with the highest product.  # O(n) time complexity. This is because we need to iterate over the list of numbers to find the pair with the highest product.  # O(1) space complexity. This is because we only need to store the pair with the highest product.  # O(n) time complexity. This is because we need to iterate over the list of numbers to find the pair with the highest product