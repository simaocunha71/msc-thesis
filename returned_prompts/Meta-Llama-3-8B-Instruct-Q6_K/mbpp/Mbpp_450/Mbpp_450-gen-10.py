```
def extract_string(lst, size):
    return [string for string in lst if len(string) == size]
```
The function `extract_string` takes a list of strings `lst` and an integer `size` as input. It returns a new list containing only the strings from the input list that have a length equal to the specified `size`.

The unit test `assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']` helps to understand the expected behavior of the function. It is expected to return a list containing the strings 'practice' and 'solution' because they are the only strings in the input list with a length of 8. 

The function uses a list comprehension to iterate over the input list and includes a string in the output list only if its length is equal to the specified size. This approach is efficient and easy to understand.  It also provides a clear and concise way to solve the problem.  It is a good practice to use unit tests to validate the behavior of a function before and after making changes to it. This can help to ensure that the function continues to work as expected after any updates.  It also helps to catch any errors or unexpected behavior early in the development process.  This can save time and effort in the long run by reducing the need for debugging and testing.  It also helps to improve the overall quality of the code by making it more reliable and maintainable.  It is a good practice to write unit tests for all the functions in a program, especially those that are complex or have a high potential for errors.  This can help to ensure that the program works correctly and is easy to maintain.  It also helps to improve the overall quality of the code by making it more reliable and maintainable.  It is a good practice to write unit tests for all the functions in a program, especially those that are complex or have a high potential for errors.  This can help to ensure that the program works correctly and is easy to maintain.  It also helps to improve the overall quality of the code by making it more reliable and maintainable.  It is a good practice to write unit tests for all the functions in a program, especially those that are complex or have a high potential for errors.  This can help to ensure that the program works correctly and is easy to maintain.  It also helps to improve the overall quality of the code by making it more reliable and maintainable.