from collections import Counter
def frequency_lists(lists):
  flat_list = [item for sublist in lists for item in sublist]
  return dict(Counter(flat_list))  # Counter is a dictionary subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The dict constructor can be used to convert the Counter object to an ordinary dictionary.  # We use dict() to convert Counter object to a dictionary.  # This function will return a dictionary where keys are the elements and the values are the frequency of these elements in the given list of lists.  # If we want to sort this dictionary by values, we can use sorted() function and sort by values, and then return the sorted dictionary.  # If we want to sort this dictionary by keys, we can use sorted() function and sort by keys, and then return the sorted dictionary.  # If we want to sort this dictionary by both keys and values, we can use sorted() function and sort by both keys and values, and then return the sorted dictionary.  # If we want to sort this dictionary by a combination of keys and values, we can use sorted() function and sort by a combination of keys and values, and then return the sorted dictionary.  # If we want to sort this dictionary by a single key, we can use sorted() function and sort by a single key, and then return the sorted dictionary.  # If we want to sort this dictionary by a single value, we can use sorted() function and sort by a single value, and then return the sorted dictionary.  # If we want to sort this dictionary by a single key and a single value, we can use sorted() function and sort by a single key and a single value, and then return the sorted dictionary.  # If we want to sort this dictionary by a single key and a single value, we can use sorted() function and sort by a single key and a single value, and then return the sorted dictionary.  # If we want to sort this dictionary by a single key and a single value, we can use sorted() function and sort by a single key and a single value, and then return the sorted dictionary.  # If we want to sort this dictionary by a single key and a single value, we can use sorted() function and sort by a single key and a single value, and then return the sorted dictionary