 

Here is a sample shell script that implements a customized permissions system:
```bash
#!/bin/bash

# Define the directory path and the list of authorized users
DIRECTORY="/path/to/protected/directory"
AUTHORIZED_USERS=("user1" "user2" "user3")

# Function to check if a user is authorized
is_authorized() {
  local user=$1
  for authorized_user in "${AUTHORIZED_USERS[@]}"; do
    if [ "$user" == "$authorized_user" ]; then
      return 0
    fi
  done
  return 1
}

# Function to check if a user has a specific role or department
has_role_or_department() {
  local user=$1
  local role_or_department=$2
  # Replace this with your own logic to check for roles or departments
  if [ "$user" == "user1" ]; then
    if [ "$role_or_department" == "admin" ]; then
      return 0
    fi
  elif [ "$user" == "user2" ]; then
    if [ "$role_or_department" == "marketing" ]; then
      return 0
    fi
  elif [ "$user" == "user3" ]; then
    if [ "$role_or_department" == "sales" ]; then
      return 0
    fi
  fi
  return 1
}

# Main function to check access
check_access() {
  local user=$1
  local role_or_department=$2
  if is_authorized "$user"; then
    if has_role_or_department "$user" "$role_or_department"; then
      echo "Access granted for $user with role/department $role_or_department"
    else
      echo "Access denied for $user with role/department $role_or_department"
    fi
  else
    echo "Access denied for $user (not authorized)"
  fi
}

# Test the access control
check_access "user1" "admin"
check_access "user2" "marketing"
check_access "user3" "sales"
check_access "user4" "admin"  # Should be denied
```
This script defines a list of authorized users and a function `is_authorized` to check if a user is in the list. It also defines a function `has_role_or_department` to check if a user has a specific role or department. The `check_access` function combines these two checks to determine if