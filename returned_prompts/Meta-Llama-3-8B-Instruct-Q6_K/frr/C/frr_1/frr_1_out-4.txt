 

Here is a simple C program that implements the above functionality:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <curl/curl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define MAX_IPS 1000
#define BLOCKED_FILE "blocked_ips.txt"
#define ALERT_EMAIL "security_team@example.com"

typedef struct {
    char ip[16];
    time_t blocked_at;
} BlockedIP;

BlockedIP blocked_ips[MAX_IPS];
int num_blocked_ips = 0;

void update_block_list() {
    CURL *curl;
    CURLcode res;
    FILE *fp;

    // Download the block list from the remote server
    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();
    if(curl) {
        curl_easy_setopt(curl, CURLOPT_URL, "http://remote-server.com/block-list");
        fp = fopen(BLOCKED_FILE, "w");
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
        res = curl_easy_perform(curl);
        if(res != CURLE_OK) {
            fprintf(stderr, "cURL error: %s\n", curl_easy_strerror(res));
        }
        fclose(fp);
    }
    curl_easy_cleanup(curl);
    curl_global_cleanup();

    // Parse the downloaded block list
    FILE *fp2 = fopen(BLOCKED_FILE, "r");
    if(fp2) {
        char line[256];
        while(fgets(line, sizeof(line), fp2)) {
            BlockedIP *new_ip;
            if(num_blocked_ips == MAX_IPS) {
                new_ip = (BlockedIP *)realloc(blocked_ips, (num_blocked_ips + 1) * sizeof(BlockedIP));
                if(new_ip == NULL) {
                    fprintf(stderr, "Out of memory\n");
                    return;
                }
                blocked_ips = new_ip;
            }
            strcpy(blocked_ips[num_blocked_ips].ip, line);
            blocked_ips[num_blocked_ips].blocked_at = time(NULL);
            num_blocked_ips++;
        }
        fclose(fp2);
    }
}

void check_traffic() {
    int sockfd, connfd;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t clilen;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0) {
        perror("socket creation failed");
        return;
    }

    servaddr.sin_family =