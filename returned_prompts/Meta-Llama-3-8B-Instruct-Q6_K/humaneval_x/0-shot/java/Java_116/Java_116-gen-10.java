    public List<Integer> sortArray(List<Integer> arr) {
        Collections.sort(arr, (a, b) -> {
            int countA = Integer.bitCount(a);
            int countB = Integer.bitCount(b);
            if (countA == countB) {
                return Integer.compare(a, b);
            } else {
                return Integer.compare(countA, countB);
            }
        });
        return arr;
    }  // This function sorts the array based on the number of ones in the binary representation of the elements. If the number of ones is the same for two elements, it sorts them based on their decimal value. The function uses the Collections.sort method with a custom comparator. The comparator compares two elements based on the number of ones in their binary representation. If the number of ones is the same, it compares the elements based on their decimal value. The comparator returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. The function returns the sorted array.  // This function sorts the array based on the number of ones in the binary representation of the elements. If the number of ones is the same for two elements, it sorts them based on their decimal value. The function uses the Collections.sort method with a custom comparator. The comparator compares two elements based on the number of ones in their binary representation. If the number of ones is the same, it compares the elements based on their decimal value. The comparator returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. The function returns the sorted array.  // This function sorts the array based on the number of ones in the binary representation of the elements. If the number of ones is the same for two elements, it sorts them based on their decimal value. The function uses the Collections.sort method with a custom comparator. The comparator compares two elements based on the number of ones in their binary representation. If the number of ones is the same, it compares the elements based on their decimal value. The comparator returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. The function returns the sorted array.  // This function sorts the array based on the number of ones in the binary representation of the elements. If the number of ones is the same for two elements, it sorts them based on their decimal value. The function uses the Collections