    public int sumSquares(List<Double> lst) {
        int sum = 0;
        for (double num : lst) {
            sum += Math.ceil(num) * Math.ceil(num);
        }
        return sum;
    }  // This function will sum the squares of the upper ceiling of each number in the list and return the sum.  // It uses a for-each loop to iterate over the list of numbers.  // For each number, it calculates the ceiling of the number and squares it, then adds it to the sum.  // Finally, it returns the sum.

Note: The Math.ceil() function is used to get the smallest integer that is greater than or equal to the given number.  // So if the number is 4.2, Math.ceil(4.2) will return 5.0.  // Similarly, if the number is 5.0, Math.ceil(5.0) will also return 5.0.  // So, in the case of 5.0, the ceiling is the same as the number.  // This is why the code works correctly even for numbers that are already integers.  // It will round up the numbers to the upper integer and then square them.  // For example, if the list contains the number 5.0, it will be rounded up to 5.0 and then squared to 25.0.  // So the sum of the squares of the ceiling of each number in the list will be the sum of the squares of the numbers in the list.  // This is why the code works correctly for lists that contain numbers that are already integers.  // It will round up the numbers to the upper integer and then square them.  // So the sum of the squares of the ceiling of each number in the list will be the sum of the squares of the numbers in the list.  // This is why the code works correctly for lists that contain numbers that are already integers.  // It will round up the numbers to the upper integer and then square them.  // So the sum of the squares of the ceiling of each number in the list will be the sum of the squares of the numbers in the list.  // This is why the code works correctly for lists that contain numbers that are already integers.  // It will round up the numbers to the upper integer and then square them.  // So the sum of the squares of the ceiling of each number in the list will be the