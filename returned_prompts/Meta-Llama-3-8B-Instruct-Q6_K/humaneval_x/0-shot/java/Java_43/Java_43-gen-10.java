    public boolean pairsSumToZero(List<Integer> l) {
        Set<Integer> seen = new HashSet<>();
        for (int num : l) {
            if (seen.contains(-num)) {
                return true;
            }
            seen.add(num);
        }
        return false;
    }  // time complexity O(n) and space complexity O(n) where n is the size of the list. This is because we are using a set to keep track of the numbers we have seen so far. We are scanning the list once. The size of the set is at most the size of the list.  // This is a more efficient solution as it avoids the need to sort the list, which would have a time complexity of O(n log n).  // This solution also avoids the need to compare each pair of numbers in the list, which would have a time complexity of O(n^2).  // This solution is also more efficient as it only requires a single pass through the list, whereas the previous solution required two passes (one to sort the list and one to find the pairs that sum to zero).  // This solution also avoids the need to store the list in a sorted order, which would require additional memory.  // This solution is also more efficient as it only requires a single set to keep track of the numbers we have seen so far, whereas the previous solution required a list to keep track of the numbers we have seen so far.  // This solution is also more efficient as it only requires a single loop to iterate through the list, whereas the previous solution required two loops to iterate through the list.  // This solution is also more efficient as it only requires a single comparison to check if we have seen the number before, whereas the previous solution required multiple comparisons to check if we have seen the number before.  // This solution is also more efficient as it only requires a single addition to add the number to the set, whereas the previous solution required multiple additions to add the number to the list.  // This solution is also more efficient as it only requires a single check to see if the number is in the set, whereas the previous solution required multiple checks to see if the number is in the list.  // This solution is also more efficient as it only requires a single return statement to return the result, whereas the previous solution required multiple return statements to return the result.  // This solution is also more efficient as it only requires a single variable to keep track of the result, whereas the previous solution required multiple