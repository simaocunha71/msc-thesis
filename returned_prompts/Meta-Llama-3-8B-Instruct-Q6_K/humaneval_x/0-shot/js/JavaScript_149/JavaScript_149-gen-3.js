The function `sortedListSum` takes a list of strings as an argument and filters out the strings with odd lengths using the `filter` method. Then, it sorts the resulted list using the `sort` method. The sorting function is a callback function that takes two arguments `a` and `b` and returns a value that determines the order of the comparison. If the lengths of `a` and `b` are equal, it compares them alphabetically using the `localeCompare` method. If the lengths are not equal, it compares the lengths directly. The sorted list is then returned.

The unit test `assert list_sort(["aa", "a", "aaa"]) => ["aa"]` ensures that the function correctly filters out the strings with odd lengths and sorts the list by length and then alphabetically. The unit test `assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]` ensures that the function correctly handles strings with different lengths.

The time complexity of this function is O(n log n) due to the sorting operation, where n is the length of the input list. The space complexity is O(n) as we need to store the filtered list.