from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
    # This function filters a list of strings for those that contain a given substring. It uses a list comprehension to iterate over the input list, and for each string, it checks if the substring is present in the string. If the substring is present, the string is included in the output list. If not, the string is skipped. The function returns the filtered list of strings. The time complexity of this function is O(n*m) where n is the number of strings in the input list and m is the length of the longest string in the input list. The space complexity is O(n) where n is the number of strings in the input list. This is because we need to store the filtered list of strings in memory. The function is case sensitive, meaning that it treats uppercase and lowercase letters as different. If you want a case-insensitive filter, you can convert both the input strings and the substring to lowercase or uppercase before comparing them. For example: return [s for s in strings if substring.lower() in s.lower()].  This function can be used as a filter in a larger program to select only those strings that contain a specific substring. For example, you could use it to filter a list of strings to only include those that contain a certain keyword.  It's also useful for filtering a list of strings to only include those that contain a certain pattern or regular expression.  It can be used in a variety of applications, including data processing, data analysis, and text processing.  It's a useful tool to have in your toolkit as a programmer.  It's also a good example of how you can use list comprehensions and lambda functions to solve a problem in Python.  It's a concise and readable way to solve the problem, and it's easy to understand and maintain.  It's also a good example of how you can use Python's built-in functions and data structures to solve a problem.  It's a good way to get started with Python programming, and it's a good example of how you can use Python to solve a problem.  It's also a good example of how you can use Python's built-in functions and data structures to solve a problem.  It's a good way to get started with Python programming, and it's a good example of how you can use Python to solve a problem.  It