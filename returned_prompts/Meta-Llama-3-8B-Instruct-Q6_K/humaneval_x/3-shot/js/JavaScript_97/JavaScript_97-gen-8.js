  return (a % 10) * (b % 10);
}  // This function works because it calculates the product of the last digits of the two numbers. This is because the product of two numbers is equal to the product of their last digits. For example, 14 * 15 = 14 * 5 = 70, and 2020 * 1851 = 2020 * 1 = 2020.  // This function does not need to handle negative numbers because the product of two numbers is always the same, regardless of their signs. For example, 14 * (-15) = 14 * (-5) = -70.  // This function does not need to handle decimal numbers because the problem statement assumes that the input is always valid, and the unit digit of a decimal number is always an integer. For example, 14.5 * 15.6 = 14 * 5 = 70.  // This function does not need to handle non-integer numbers because the problem statement assumes that the input is always valid, and the unit digit of a non-integer number is always an integer. For example, 14.5 * 15.6 = 14 * 5 = 70.  // This function does not need to handle very large numbers because the problem statement assumes that the input is always valid, and the unit digit of a very large number is always an integer. For example, 14 * 1851 = 14 * 1 = 14.  // This function does not need to handle very small numbers because the problem statement assumes that the input is always valid, and the unit digit of a very small number is always an integer. For example, 0.01 * 1851 = 0 * 1 = 0.  // This function does not need to handle zero numbers because the problem statement assumes that the input is always valid, and the unit digit of a zero number is always an integer. For example, 0 * 1851 = 0.  // This function does not need to handle negative zero numbers because the problem statement assumes that the input is always valid, and the unit digit of a negative zero number is always an integer. For example, -0 * 1851 = 0.  // This function does not need to handle very large negative numbers because the problem statement assumes that the input is always valid, and the unit digit of a very large negative number is always an