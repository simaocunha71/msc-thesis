  return l.filter(n => n >= 0);
}  // both of them will return the same result but the second one also includes 0
// filter() is a higher-order function, which means it takes another function as an argument and applies it to each element in the array. This inner function is called the predicate. It returns true for the elements that should be included in the resulting array and false for the elements that should be excluded. If the predicate returns false, the element is skipped and the next element is processed. If the predicate returns true, the element is included in the resulting array and the next element is processed.  // The filter() method returns an array with all elements that pass the test implemented by the provided function. It returns a new array without modifying the original array.  // The filter() method does not change the original array. It creates a new array with the elements that meet the condition.  // The filter() method is a part of the array prototype, which means it is available on every array in JavaScript.  // It can be used to remove unwanted elements from an array, to create a new array with specific elements, or to transform an array in some way.  // It is a very powerful tool in JavaScript and is used in many different situations.  // It can be used to filter an array based on many different conditions, such as the value of the elements, the type of the elements, the length of the elements, or many other conditions.  // It can also be used to filter an array based on a condition that is determined by a function.  // It is a very flexible tool and can be used in many different ways.  // It is a part of the array prototype, which means it is available on every array in JavaScript.  // It is a very powerful tool in JavaScript and is used in many different situations.  // It can be used to remove unwanted elements from an array, to create a new array with specific elements, or to transform an array in some way.  // It is a very powerful tool in JavaScript and is used in many different situations.  // It can be used to filter an array based on many different conditions, such as the value of the elements, the type of the elements, the length of the elements, or many other conditions.  // It can also be used to filter an array based on a condition that is determined by a function