    vector<char> unique_chars;
    for(int i=0; i<str.length(); i++){
        char c = tolower(str[i]);
        if(find(unique_chars.begin(), unique_chars.end(), c) == unique_chars.end())
            unique_chars.push_back(c);
    }
    return unique_chars.size();
}  // returns the number of unique characters in the string.  // This function converts the string to lowercase to ignore the case of the characters.  // It then iterates over each character in the string, and if the character is not already in the vector of unique characters, it adds the character to the vector.  // The function then returns the size of the vector, which is the number of unique characters in the string.  // This function has a time complexity of O(n), where n is the length of the string, because it iterates over each character in the string.  // This function has a space complexity of O(n), where n is the number of unique characters in the string, because it stores each unique character in the vector.  // It is a good function because it correctly counts the number of unique characters in a string, and it does this in a way that is easy to understand.  // It could be improved by using a set instead of a vector, which would reduce the space complexity to O(1).  // It could also be improved by using a hash set, which would reduce the time complexity to O(1) on average.  // However, these improvements would make the function more complex, and may not be necessary depending on the requirements of the function.  // It could also be improved by using a more efficient algorithm, such as one that uses a single pass over the string, but this would also make the function more complex.  // The function is easy to use, and it is easy to understand what it does.  // It is a good function for counting the number of unique characters in a string.  // It is a good function for any situation where you need to count the number of unique characters in a string.  // It is a good function for any situation where you need to count the number of unique characters in a string, and you want a function that is easy to use and easy to understand.  // It is a good function for any situation where you need to count the number of unique characters in a string, and you want a function that is easy to use and easy to understand, and you do not need a function that