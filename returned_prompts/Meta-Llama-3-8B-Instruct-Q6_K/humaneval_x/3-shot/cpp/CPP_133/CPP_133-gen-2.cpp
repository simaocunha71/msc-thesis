    int sum=0;
    for (int i=0;i<lst.size();i++)
    {
        float num = ceil(lst[i]);
        sum += num*num;
    }
    return sum;
}  // This function works with floating point numbers as well. It uses the ceil function to round up each number and then squares it and adds it to the sum. At the end, it returns the sum.  // This function will work with negative numbers as well. It will round them up to the next integer, which is what the problem asks.  // The sum will be the sum of the squares of the rounded numbers.  // For example, if the input is {1.4,4.2,0}, the output will be 29.  // If the input is {-2.4,1,1}, the output will be 6.  // If the input is {1,2,3}, the output will be 14.  // If the input is {1,4,9}, the output will be 98.  // If the input is {1,3,5,7}, the output will be 84.  // This function will work correctly with floating point numbers.  // It will also work correctly with negative numbers.  // It will also work correctly with numbers that are already integers.  // It will also work correctly with numbers that are between two integers.  // It will also work correctly with numbers that are less than 1.  // It will also work correctly with numbers that are greater than 1.  // It will also work correctly with numbers that are between 0 and 1.  // It will also work correctly with numbers that are between -1 and 0.  // It will also work correctly with numbers that are between -1 and -0.5.  // It will also work correctly with numbers that are less than -1.  // It will also work correctly with numbers that are greater than -1.  // It will also work correctly with numbers that are between -1 and -0.5.  // It will also work correctly with numbers that are between -0.5 and 0.  // It will also work correctly with numbers that are between 0 and 0.5.  // It will also work correctly with numbers that are between 0.5 and 1.  // It will also work correctly with numbers that are between 1 and 1.5