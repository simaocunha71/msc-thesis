    int count=0;
    for (int i=0;i<grid.size();i++)
    {
        int sum=0;
        for (int j=0;j<grid[i].size();j++)
        {
            sum += grid[i][j];
        }
        count += (sum/capacity);
    }
    return count;
}  // This function calculates the number of times you need to lower the buckets. It does this by summing up the number of 1s in each row, then dividing this by the capacity of the bucket, and finally adding up the results.  The reason this works is that each bucket can hold a certain amount of water, so the number of times you need to lower the bucket is equal to the number of times the bucket fills up.  The bucket fills up when the amount of water in it reaches the capacity of the bucket.  So, by summing up the number of 1s in each row and dividing this by the capacity, we are essentially counting the number of times the bucket fills up.  Finally, we add up the results for each row to get the total number of times we need to lower the bucket.  // This function could be improved by using a more efficient algorithm, such as one that does not require summing up the number of 1s in each row.  However, this function should work fine for the given constraints.  // Also, it could be improved by handling the case where the capacity is 1, as this would make the function more efficient.  // It could also be improved by handling the case where the grid is empty, as this would also make the function more efficient.  // It could also be improved by handling the case where the capacity is greater than the total number of 1s in the grid, as this would also make the function more efficient.  // It could also be improved by handling the case where the grid is empty and the capacity is greater than 0, as this would also make the function more efficient.  // It could also be improved by handling the case where the grid is empty and the capacity is less than or equal to 0, as this would also make the function more efficient.  // It could also be improved by handling the case where the grid is empty and the capacity is less than or equal to 0, as this would also make the function more efficient.  // It could also be improved by handling the case where the grid is empty and the capacity