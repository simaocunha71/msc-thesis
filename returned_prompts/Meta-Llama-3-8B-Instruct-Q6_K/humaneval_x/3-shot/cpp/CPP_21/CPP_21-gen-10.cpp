    float min_val=float(min_element(numbers.begin(),numbers.end()));
    float max_val=float(max_element(numbers.begin(),numbers.end()));
    vector<float> result;
    for (int i=0;i<numbers.size();i++)
    {
        result.push_back((numbers[i]-min_val)/(max_val-min_val));
    }
    return result;
}  // This function rescales the given vector of numbers such that the smallest number becomes 0 and the largest becomes 1. It calculates the minimum and maximum values in the given vector and then uses these values to rescale each number in the vector. The result is a new vector where each number is in the range [0,1].  //  The time complexity of this function is O(n), where n is the number of elements in the given vector. This is because it iterates over the vector once to find the minimum and maximum values, and then again to rescale the numbers.  //  The space complexity of this function is also O(n), because it creates a new vector to store the rescaled numbers.  //  For example, if the input vector is {1.0, 2.0, 3.0, 4.0, 5.0}, the output will be {0.0, 0.25, 0.5, 0.75, 1.0}.  //  This function can be useful in a variety of applications, such as data normalization, data preprocessing, and feature scaling. It can also be used to map a range of values to a new range, such as mapping a range of temperatures to a range of colors.  //  However, this function assumes that the input vector contains at least two elements. If the input vector contains only one element, the function will return a vector with only one element. If the input vector is empty, the function will return an empty vector.  //  In a real-world application, you may want to add error checking code to handle these cases.  //  For example, you could check if the input vector is empty before trying to access its elements, and return an error message if it is.  //  You could also check if the input vector contains only one element, and return an error message if it does.  //  Here is an example of how you could add error checking code to the function:  //  ```c  vector<float> rescale_to_unit(vector<float> numbers)  {  if (