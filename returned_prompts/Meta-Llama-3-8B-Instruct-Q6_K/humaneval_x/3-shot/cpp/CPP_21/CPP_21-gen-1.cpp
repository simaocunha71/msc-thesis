    float min_val = *min_element(numbers.begin(), numbers.end());
    float max_val = *max_element(numbers.begin(), numbers.end());
    vector<float> result;
    for(int i = 0; i < numbers.size(); i++)
    {
        result.push_back((numbers[i] - min_val) / (max_val - min_val));
    }
    return result;
}  // This will return a vector of numbers in the range [0,1].  // The smallest number will become 0 and the largest will become 1.  // The function first finds the minimum and maximum values in the input vector.  // Then it iterates over the input vector, subtracting the minimum value and dividing by the range (max-min) to scale the value to the range [0,1].  // The scaled values are stored in the result vector.  // Finally, the function returns the result vector.  // The time complexity is O(n) where n is the size of the input vector.  // The space complexity is also O(n) for storing the result vector.  // The function does not modify the input vector.  // It can be used to preprocess data before training a model or to normalize data for visualization.  // It can also be used to transform data to a common scale for comparison.  // For example, it can be used to compare the performance of different models on different datasets.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps.  // It can be used to compare the performance of different models on the same dataset but with different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models on the same dataset but with different preprocessing steps and different hyperparameters.  // It can be used to compare the performance of different models