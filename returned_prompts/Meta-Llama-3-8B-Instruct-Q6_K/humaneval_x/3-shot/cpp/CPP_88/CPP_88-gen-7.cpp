    int sum = array[0] + array[array.size()-1];
    vector<int> result = array;
    if (sum % 2 == 0)
        sort(result.begin(), result.end(), greater<int>());
    else
        sort(result.begin(), result.end());
    return result;
}  //  This function first calculates the sum of the first and the last element of the array. Then it checks if this sum is even or odd. If it is even, it sorts the array in descending order, if it is odd, it sorts the array in ascending order. It returns the sorted array.  //  The function does not modify the original array, it returns a copy of the array after sorting.  //  The time complexity of this function is O(n log n) due to the sorting operation.  //  The space complexity is O(n) for the result array.  //  The function uses the std::sort function from the C++ Standard Template Library, which sorts the array in ascending order by default. The std::greater<int>() function is used to sort the array in descending order.  //  The function assumes that the input array is not empty. If the array is empty, it will throw a runtime error.  //  The function does not check if the input array contains non-negative integers. If the array contains non-negative integers, the function will work correctly. If the array contains non-negative integers and other types of numbers, the function may not work correctly.  //  The function does not check if the input array contains duplicate elements. If the array contains duplicate elements, the function will work correctly. If the array does not contain duplicate elements, the function will work correctly.  //  The function does not check if the input array is already sorted. If the array is already sorted, the function will work correctly. If the array is not already sorted, the function will work correctly.  //  The function does not check if the input array contains only one element. If the array contains only one element, the function will work correctly. If the array does not contain only one element, the function will work correctly.  //  The function does not check if the input array contains no elements. If the array contains no elements, the function will throw a runtime error.  //  The function does not check if the input array contains negative numbers. If the array contains negative numbers, the function will work correctly. If the array does not contain negative numbers, the function will