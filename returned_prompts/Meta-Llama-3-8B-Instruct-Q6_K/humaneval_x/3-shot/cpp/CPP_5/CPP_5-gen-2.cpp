    vector<int> result;
    for (int i=0; i<numbers.size(); i++)
    {
        result.push_back(numbers[i]);
        if (i<numbers.size()-1)
        result.push_back(delimeter);
    }
    return result;
}  // This function works for any type of elements, not just integers.  It creates a new vector and then iterates over the original vector.  It adds each element from the original vector to the new vector, and if it's not the last element, it also adds the delimiter.  Finally, it returns the new vector.  This function assumes that the input vector is not empty.  If you want to handle the case where the input vector is empty, you could add an if statement to handle that case.  // This function could also be implemented using iterators, but this implementation is simpler.  // This function could also be implemented using a range-based for loop, but this implementation is simpler.  // This function could also be implemented using a loop with an index, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class and a function, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class and a function and a struct, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class and a function and a struct and a union, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class and a function and a struct and a union and a enum, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer and an array and a class and a function and a struct and a union and a enum and a macro, but this implementation is simpler.  // This function could also be implemented using a loop with an index and a pointer