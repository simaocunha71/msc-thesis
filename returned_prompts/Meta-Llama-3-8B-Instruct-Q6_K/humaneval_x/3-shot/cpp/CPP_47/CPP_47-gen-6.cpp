    sort(l.begin(), l.end());
    int size = l.size();
    if(size%2==0)
        return (l[size/2-1]+l[size/2])/2.0;
    else
        return l[size/2];
}  // this function works correctly for both even and odd size vectors
// time complexity of this function is O(n log n) due to the sort operation
// where n is the size of the input vector.  // space complexity is O(1) as we only use a fixed amount of space to store the input and output.  // this function returns the median of the input vector.
// the median is the middle value of the sorted list when the list is sorted in ascending order.  // if the list has an even number of elements, the median is the average of the two middle values.  // this function handles both cases correctly.  // this function returns the median as a floating point number.  // the time complexity of this function is O(n log n) and the space complexity is O(1).  // the function is correct and works correctly for both even and odd size vectors.  // the function returns the median of the input vector.  // the median is the middle value of the sorted list when the list is sorted in ascending order.  // if the list has an even number of elements, the median is the average of the two middle values.  // this function handles both cases correctly.  // this function returns the median as a floating point number.  // the time complexity of this function is O(n log n) and the space complexity is O(1).  // the function is correct and works correctly for both even and odd size vectors.  // the function returns the median of the input vector.  // the median is the middle value of the sorted list when the list is sorted in ascending order.  // if the list has an even number of elements, the median is the average of the two middle values.  // this function handles both cases correctly.  // this function returns the median as a floating point number.  // the time complexity of this function is O(n log n) and the space complexity is O(1).  // the function is correct and works correctly for both even and odd size vectors.  // the function returns the median of the input vector.  // the median is the middle value of the sorted list when the list is sorted in ascending order.  // if the list