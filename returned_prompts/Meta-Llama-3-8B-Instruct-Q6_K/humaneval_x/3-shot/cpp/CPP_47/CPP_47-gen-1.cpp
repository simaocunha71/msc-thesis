    sort(l.begin(), l.end());
    int n = l.size();
    if (n % 2 == 0) {
        return (l[n/2-1] + l[n/2]) / 2;
    } else {
        return l[n/2];
    }
}  // This function returns the median of a vector of numbers. If the size of the vector is even, it returns the average of the two middle numbers. If the size is odd, it returns the middle number. The function first sorts the vector in ascending order. Then it checks if the size of the vector is even or odd. If it is even, it calculates the average of the two middle numbers and returns it. If it is odd, it returns the middle number.  // This function uses the algorithm library to sort the vector. This is more efficient than sorting the vector manually.  // This function also uses the size function of the vector to get the size of the vector. This is more efficient than using a loop to count the elements in the vector.  // This function returns a float, because the median of a vector of numbers can be a float.  // This function assumes that the input vector is not empty. If the input vector is empty, the function will throw an exception.  // This function assumes that the input vector contains only numbers. If the input vector contains non-numeric elements, the function will throw an exception.  // This function is case-insensitive, because it uses the tolower function to convert the input string to lowercase.  // This function is not thread-safe, because it uses the rand function to generate a random number. If this function is called from multiple threads simultaneously, it may generate the same random number multiple times.  // This function is not exception-safe, because it does not catch any exceptions that may be thrown by the rand function. If an exception is thrown, the function will terminate abnormally.  // This function is not locale-dependent, because it uses the tolower function to convert the input string to lowercase. If the input string contains characters that are not letters, the function will not work correctly.  // This function is not Unicode-aware, because it uses the tolower function to convert the input string to lowercase. If the input string contains Unicode characters, the function will not work correctly.  // This function is not compatible with ASCII, because it uses the tolower function to convert the input string to lowercase. If the input string contains ASCII characters,