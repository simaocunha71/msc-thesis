    float log_x= log(x);
    float log_n= log(n);
    if (fmod(log_x,fmod(log_n,1.0))==0)
    return true;
    else
    return false;
}  // This function assumes that n is positive. For negative n, we need to check the sign of x.  // If x is positive, it is a simple power of n if n**int(log(x)/log(n))=x. If x is negative, it is a simple power of n if n**int(log(-x)/log(-n))=x.  // We can combine these two conditions into a single function.  bool is_simple_power(int x,int n){  float log_x= log(abs(x));  float log_n= log(abs(n));  if (fmod(log_x,fmod(log_n,1.0))==0)  return true;  else  return false; }  // This function assumes that n is positive. For negative n, we need to check the sign of x.  // If x is positive, it is a simple power of n if n**int(log(x)/log(n))=x. If x is negative, it is a simple power of n if n**int(log(-x)/log(-n))=x.  // We can combine these two conditions into a single function.  bool is_simple_power(int x,int n){  if (n<0)  return false;  float log_x= log(abs(x));  float log_n= log(abs(n));  if (fmod(log_x,fmod(log_n,1.0))==0)  return true;  else  return false; }  // This function assumes that n is positive. For negative n, we need to check the sign of x.  // If x is positive, it is a simple power of n if n**int(log(x)/log(n))=x. If x is negative, it is a simple power of n if n**int(log(-x)/log(-n))=x.  // We can combine these two conditions into a single function.  bool is_simple_power(int x,int n){  if (n<0)  return false;  float log_x= log(abs(x));  float log_n= log(abs(n));  if (fmod(log_x,fmod(log_n,1.0))==0)  return true;  else  return false; }  // This