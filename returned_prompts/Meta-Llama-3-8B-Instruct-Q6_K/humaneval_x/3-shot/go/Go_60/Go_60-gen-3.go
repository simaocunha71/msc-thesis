    sum := 0
    for i := 1; i <= n; i++ {
        sum += i
    }
    return sum
}  // or return n*(n+1)/2 for better performance. This is a well-known formula for the sum of an arithmetic series.  // SumToN = n*(n+1)/2. This is the most efficient way to calculate sum of n natural numbers.  // This approach is O(1) in terms of time complexity.  // Time complexity of the original function is O(n), where n is the input number.  // So, for large inputs, the improved function will be more efficient.  // return n*(n+1)/2  }  // or return int(float64(n)*(n+1)/2) for larger inputs.  // This will prevent integer overflow for large inputs.  // return int(float64(n)*(n+1)/2)  }  // or return int(math.FloatingPointSum(1, n)) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.FloatingPointSum(1, n))  }  // or return int(math.Sum(1, n)) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.Sum(1, n))  }  // or return int(math.Sum(math.Range(1, n+1))) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.Sum(math.Range(1, n+1)))  }  // or return int(math.Sum(math.Range(1, n+1))) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.Sum(math.Range(1, n+1)))  }  // or return int(math.Sum(math.Range(1, n+1))) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.Sum(math.Range(1, n+1)))  }  // or return int(math.Sum(math.Range(1, n+1))) for even more efficient solution.  // This will return the sum of all integers from 1 to n.  // return int(math.Sum(math.Range(1, n