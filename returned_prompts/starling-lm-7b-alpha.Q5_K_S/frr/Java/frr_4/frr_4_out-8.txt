

```java
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.InterruptedException;
import java.util.Base64;

public class KeyRotator {
    private static final String ALGORITHM = "AES";
    private static final int KEY_SIZE = 256;
    private static final long HOURS_IN_MILLIS = 24 * 60 * 60 * 1000;
    private static final SecureRandom random = new SecureRandom();
    private static Key currentKey = null;
    private static long lastKeyUpdate = 0;

    public static void main(String[] args) {
        KeyPairGenerator keyPairGenerator = new KeyPairGenerator(ALGORITHM);
        keyPairGenerator.initialize(KEY_SIZE / 8);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();

        currentKey = keyPair.getPrivate();
        lastKeyUpdate = System.currentTimeMillis();

        System.out.println("Current Key: " + Base64.getEncoder().encodeToString(currentKey.getEncoded()));
        System.out.println("Key will expire in " + (HOURS_IN_MILLIS - (System.currentTimeMillis() - lastKeyUpdate)) / HOURS_IN_MILLIS + " hours");

        String message = "Hello, World!";
        String encryptedMessage = encrypt(message);
        String decryptedMessage = decrypt(encryptedMessage);
        System.out.println("Encrypted Message: " + encryptedMessage);
        System.out.println("Decrypted Message: " + decryptedMessage);
    }

    public static String encrypt(String message) {
        if (System.currentTimeMillis() - lastKeyUpdate > HOURS_IN_MILLIS) {
            updateKey();
        }

        try {