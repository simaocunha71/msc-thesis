

```
#include <iostream>
#include <pcap.h>
#include <string>
#include <vector>
#include <sstream>
#include <unistd.h>
#include <netinet/in.h>

using namespace std;

struct Rule {
    string src_ip;
    string dst_ip;
    string src_port;
    string dst_port;
    string protocol;
    int packet_length;
};

void process_packet(const u_char *packet, const struct pcap_pkthdr *header, const struct pcap_if_t *alldevs);

int main() {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct pcap_pkthdr header;
    const u_char *packet;
    pcap_if_t *alldevs;
    pcap_if_t *d;
    char *device;
    int i;
    int count = 0;

    cout << "Select the network interface to monitor: ";
    for (d = alldevs, i = 0; d && i < count; d = d->next, i++) {
        cout << i << '.' << d->name << endl;
    }
    cin >> device;

    handle = pcap_open_live(device, BUFSIZ, 1, 1000, errbuf);
    if (handle == nullptr) {
        cout << "Error opening device " << device << ": " << errbuf << endl;
        return -1;
    }

    pcap_loop(handle, -1, process_packet, nullptr);

    pcap_close(handle);
    return 0;
}

void process_packet(const u_char *packet, const struct pcap_pkthdr *header, const struct pcap_if_t *alldevs) {
    struct ether_header *ethernet_header = (struct ether_header *)packet;
    struct ip *ip_header = (struct ip *)(packet + sizeof(struct ether_header));
    struct tcphdr