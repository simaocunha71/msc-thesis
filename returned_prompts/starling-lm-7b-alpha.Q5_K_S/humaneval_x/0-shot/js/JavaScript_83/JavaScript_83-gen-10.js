
The approach to this problem is to understand that we can have n-1 digits for the remaining part of the number.

For the first part, we have two options:

1) It can start with a 1 and the remaining part can be of length (n-1). Here, we have n-1 options since we can choose any of the (n-1) digits for the remaining part.

2) It can end with a 1 and the remaining part can be of length (n-1). Here, we have n-1 options since we can choose any of the (n-1) digits for the remaining part.

Therefore, the total count of numbers that start or end with 1 will be 2*(n-1).

Here is the Javascript implementation:

```javascript
const startsOneEnds = (n) => 2*(n-1);
```

The time complexity of this function is O(1) and space complexity is O(1).

Here is the Javascript implementation:

```javascript
const startsOneEnds = (n) => 2*(n-1);
```

The time complexity of this function is O(1) and space complexity is O(1).







































































































































































































































