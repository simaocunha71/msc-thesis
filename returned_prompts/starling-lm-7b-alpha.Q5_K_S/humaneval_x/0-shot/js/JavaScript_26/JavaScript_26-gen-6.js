
    let result = []

    for (let i = 0; i < numbers.length; i++) {
        if (result.indexOf(numbers[i]) === -1) {
            result.push(numbers[i])
        }
    }
    return result
};

/*
In this code, we initialize an empty array called "result". We then loop through the "numbers" array using a for loop. For each element in the "numbers" array, we check if it is already present in the "result" array by using the indexOf method. If the element is not found in the "result" array (i.e., its index is -1), we add it to the "result" array using the push method. This way, we only keep unique elements from the "numbers" array in the "result" array, preserving the order of the elements. Finally, we return the "result" array.

The time complexity of this solution is O(n), where n is the length of the input array, because we only need to iterate through the input array once to build the output array. The space complexity is also O(n), as in the worst case, we need to store all the elements of the input array in the output array.

This solution is simple and straightforward, but it may not be the most efficient for large input arrays, as it requires iterating through the input array multiple times (once for each element). More efficient solutions may exist, such as using a hash table to keep track of seen elements, but they may be more complex to implement.
*/



































































































































































