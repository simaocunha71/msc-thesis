const result = [];

strings.forEach(str => {
  if (str.includes(substring)) {
    result.push(str);
  }
});

return result;
};


In the above code, we have a function `filterBySubstring` that takes an array of strings and a substring as arguments. It uses a `forEach` loop to iterate through each string in the array. Inside the loop, it checks if the current string includes the given substring using the `includes` method. If it does, it pushes the string to the `result` array. Finally, it returns the `result` array.

To use this function, you can call it with an empty array and a substring as arguments, like `filterBySubstring([], 'a')`. This will return an empty array because there are no strings to filter. 

To filter the input list of strings for ones that contain a given substring, you can call the `filterBySubstring` function with the list of strings and the substring as arguments. For example, `filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')` will return `['abc', 'bacd', 'array']` because these are the strings in the input list that contain the substring 'a'.

Overall, the `filterBySubstring` function allows you to filter an input list of strings based on the presence of a given substring, and returns a new array containing only the strings that contain the substring.















































































































































































