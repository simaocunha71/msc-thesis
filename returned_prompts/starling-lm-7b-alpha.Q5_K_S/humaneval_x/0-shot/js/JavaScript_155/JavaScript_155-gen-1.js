  let result = [0, 0];
  while (num > 0) {
    result[num % 2]++;
    num = Math.floor(num / 10);
  }
  return result;
};

/*
  The above code can be improved by using the following one-liner code:

  const evenOddCount = (num) => {
    return [num.toString().match(/1/g).length, num.toString().match(/0/g).length];
  }

  Note: The above one-liner code can be optimized further using regular expression:

  const evenOddCount = (num) => {
    return [num.toString().match(/1/g).length, num.toString().length - num.toString().match(/1/g).length];
  }

  The above optimized one-liner code has a time complexity of O(log(n)), which is faster than the previous one-liner solution with a time complexity of O(n).
*/

evenOddCount(-12);
evenOddCount(123);






























































































































































































































































