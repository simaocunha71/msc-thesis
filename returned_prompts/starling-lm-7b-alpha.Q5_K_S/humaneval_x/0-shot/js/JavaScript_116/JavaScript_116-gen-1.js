
function countOnes(num) {
  return num.toString(2).split('').reduce((acc, x) => acc + (x === '1'), 0);
}

return arr.sort((a, b) => (countOnes(a) === countOnes(b) ? a - b : countOnes(a) - countOnes(b)));

/*

The approach is to count the number of ones in the binary representation of the number. This is done by converting the number to binary using toString(2) and then splitting the string into an array of characters using split(''). We then reduce this array to a single number by adding up all the '1's using the reduce method. The result is the count of ones in the binary representation of the number.

To sort the array according to the number of ones in their binary representation in ascending order, we use the sort method on the array. We pass a compare function to the sort method which compares two elements of the array. If the count of ones in the binary representation of the first element is equal to the count of ones in the binary representation of the second element, then we compare the two numbers themselves using the - operator. If the count of ones in the binary representation of the first element is less than the count of ones in the binary representation of the second element, then we return a negative number to sort the first element after the second element in the array. If the count of ones in the binary representation of the first element is greater than the count of ones in the binary representation of the second element, then we return a positive number to sort the first element before the second element in the array.

This way, the array is sorted according to the number of ones in their binary representation in ascending order, and for similar number of ones, the array is sorted based on their decimal value.

*/

*/









































































































