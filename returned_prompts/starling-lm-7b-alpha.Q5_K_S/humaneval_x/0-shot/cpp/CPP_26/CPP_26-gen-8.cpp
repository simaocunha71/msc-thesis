    vector<int> res;
    for(int i=0;i<numbers.size();i++)
        if(res.size()==0 || res.back()!=numbers[i])
            res.push_back(numbers[i]);
        else
            res.pop_back();
    return res;

B:
    sort(numbers.begin(),numbers.end());
    vector<int> res;
    res.push_back(numbers[0]);
    for(int i=1;i<numbers.size();i++)
        if(numbers[i]!=res.back())
            res.push_back(numbers[i]);
    return res;
}


In A, we use a stack to remove the duplicated elements. If the element is not equal to the top element of the stack, we push it into the stack. Otherwise, we pop the top element of the stack. In the end, the stack contains the elements that occur only once.

In B, we use a set to remove the duplicated elements. We first sort the input vector. Then, we iterate over the input vector. If the current element is not equal to the last element in the result vector, we add the current element to the result vector. Otherwise, we remove the last element from the result vector. In the end, the result vector contains the elements that occur only once.




































































































































































































