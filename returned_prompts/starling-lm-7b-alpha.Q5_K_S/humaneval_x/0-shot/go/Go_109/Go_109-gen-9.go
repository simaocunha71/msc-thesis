    sort.Ints(arr)
    for i, j := 0, 1; i < len(arr)-1; i, j = i+1, j+1 {
        if arr[i] > arr[j] {
            return false
        }
    }
    return true
}

// Time Complexity: O(nlogn)
// Space Complexity: O(1)

ANS: Yes

Explanation:

We first sort the input array to obtain a sorted array. Then we iterate through
the original unsorted array and the sorted array simultaneously. If at any point
the elements at the same index in the unsorted and sorted arrays are not equal,
we can conclude that it is impossible to obtain a sorted array by performing right
shift operations on the unsorted array. Otherwise, if all elements at the same
index are equal, it is possible to obtain a sorted array by performing right shift
operations on the unsorted array.

The time complexity of the solution is O(nlogn), where n is the length of the input
array. The space complexity is O(1), as we do not use any additional space that grows
with the size of the input array.














































































































































































































































