    var result []int

    var tmp = n
    for tmp != 1 {
        if tmp%2 == 0 {
            tmp = tmp/2
        } else {
            tmp = 3*tmp + 1
            result = append(result, tmp)
        }
    }
    sort.Ints(result)
    return result


```
??
这个题目的关键在于理解Collatz序列的生成过程，并根据这个过程生成一个有序的奇数列表。

首先，我们需要理解Collatz序列的生成过程。Collatz序列是一个从一个给定正整数开始的序列，每一项都是前一项的一半（如果前一项是偶数）或者三倍加一（如果前一项是奇数）。Collatz问题的假设是，无论从何处开始，这种序列都会始终降至1。

为了解决这个问题，我们需要一个函数来生成Collatz序列，并一个函数来从中提取奇数。我们可以使用一个栈来存储奇数，并在每次迭代中将栈中的最后一个元素弹出并将其加倍。当栈中只剩下1时，我们可以返回栈中的奇数列表。

在这个解决方案中，我们首先定义了一个名为GetOddCollatz的函数，它接收一个正整数作为输入。这个函数首先创建了一个空的result切片，用于存储奇数。然后我们创建了一个tmp变量，并将其设置为输入的n。

接下来，我们进入一个循环，直到tmp等于1。在每次迭代中，我们检查tmp是否为偶数。如果是，我们将tmp除以2。如果tmp是奇数，我们将tmp乘以3并加1，并将其添加到result切片中。

在循环