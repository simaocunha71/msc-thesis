To solve this problem, we can use a stack to keep track of all the "open" parentheses that don't have a match yet.

func SeparateParenGroups(paren_string string) []string {
    result := []string{}
    stack := []rune{}
    for _, r := range paren_string {
        if r == '(' {
            stack = append(stack, r)
        } else if r == ')' {
            if len(stack) == 0 {
                result = append(result, string(r))
            } else {
                stack = stack[:len(stack)-1]
                result = append(result, string(r))
            }
        }
    }
    return result
}


In the above code, for each character in the paren_string, we check if it's an open parentheses or a closed parentheses. If it's an open parentheses, we add it to the stack. If it's a closed parentheses, we check if the stack is empty. If the stack is empty, we add the closed parentheses to the result. Otherwise, we remove the top element from the stack, indicating that the open and closed parentheses match.



































































































































































































































