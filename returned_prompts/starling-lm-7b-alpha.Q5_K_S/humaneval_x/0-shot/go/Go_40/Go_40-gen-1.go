
func TriplesSumToZero(l []int) bool {
    m := map[int]int{}
    for _, v := range l {
        m[v]++
    }

    for _, v := range l {
        if m[v] >= 2 {
            m[v]--
            if m[v] >= 2 {
                m[v]--
                if m[-v] > 0 {
                    return true
                }
                m[v]++
                m[v]++
            }
        }
    }
    return false
}

In this function, we use a map to count the occurrences of each number in the input slice. We then iterate through the input slice, and for each number, we check if the number occurs twice or more times. If it does, we decrement the count of that number and check if its negative exists in the map with a count greater than 0. If it does, we return true, since we have found three distinct elements that sum to zero. If no such combination is found, we return false.

This solution has a time complexity of O(n), where n is the length of the input slice, and a space complexity of O(n), since we use a map to store the occurrences of each number in the input slice.

















































































































































































































