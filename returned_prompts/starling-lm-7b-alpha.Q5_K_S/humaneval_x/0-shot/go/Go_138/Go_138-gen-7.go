
func IsEqualToSumEven(n int) bool {
    if n <= 0 {
        return false
    }
    if n % 2 == 1 {
        return false
    }
    return (n / 2) % 2 == 0
}

// Time complexity: O(1)
// Space complexity: O(1)

In this solution, we only need to check whether the number is less than or equal to 0, and whether the number is odd. If the number is odd, it cannot be written as the sum of exactly 4 positive even numbers, since the sum of 4 positive even numbers is always even. If the number is even, we can check whether it is divisible by 4, since the number can be written as the sum of 4 positive even numbers if and only if it is divisible by 4.

In order to check whether a number is divisible by 4, we can check whether the number modulo 4 equals 0.

In addition, we can optimize the solution by directly checking whether the number modulo 2 equals 0, since a number can be written as the sum of exactly 4 positive even numbers if and only if it is divisible by 4 and its last digit is even.

The time complexity of this solution is O(1), since the time taken by the solution depends on the number itself rather than the size of the number. The space complexity is O(1), since the space taken by the solution does not depend on the size of the number.














































































































































































