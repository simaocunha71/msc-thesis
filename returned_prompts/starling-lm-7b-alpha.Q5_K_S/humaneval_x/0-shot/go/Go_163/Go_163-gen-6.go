To solve this Kata, you have to write a function named GenerateIntegers that takes two positive integers as parameters, and returns a slice of integers that contains all the even digits between these two numbers in ascending order.

For example, if the function is called with the parameters (2, 8), it should return [2, 4, 6, 8]. If it’s called with (8, 2), it should return the same result. If it’s called with (10, 14), it should return an empty slice, because there are no even numbers between 10 and 14.

Here are some hints to help you get started:

- To check if a number is even, you can use the modulo operator (%). The modulo of a number and 2 is 0 if the number is even, and 1 otherwise. So, you can use this operator to check if a number is even.
- To generate all the numbers between two integers a and b (inclusive), you can use a for loop with the range keyword. For example, you can use the following loop to print all the numbers between 0 and 9 (inclusive): fmt.Println(i for i := 0; i <= 9; i++)
- To filter the numbers generated by the loop, you can use a conditional expression. For example, you can use the following expression to filter out only the even numbers from the generated slice: even := make([]int, 0) for _, i := range numbers { if i % 2 == 0 { even = append(even, i) } }
- To sort a slice of integers, you can use the sort.Ints function from the sort package. For example, you can use the following code to sort a slice of integers named numbers: sort.Ints(numbers)

Here are some additional resources that you might find helpful:

- Modulo Operator: https://golang.org/doc/effective_go.html#modulo_operator
- Range Clause: https://golang.org/ref/spec#RangeClause
- Conditional Expressions: https://golang.org/ref/spec#Conditional_expressions
- Sort Package: https://golang.org/pkg/sort/

Here