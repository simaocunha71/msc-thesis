
func SumProduct(numbers []int) (sum int, product int) {
    sum = 0
    product = 1
    for _, n := range numbers {
        sum += n
        product *= n
    }
    return
}

In the above code, we define a function SumProduct that takes a slice of integers as its argument. Inside the function, we initialize the sum and product variables to 0 and 1 respectively. Then, we use a for loop to iterate over the numbers slice. For each number, we add it to the sum and multiply it with the product. Finally, we return the sum and product values as a tuple of type [2]int.

To use this function, you can simply call SumProduct with a slice of integers as an argument. For example, SumProduct([]) will return (0, 1) and SumProduct([1, 2, 3, 4]) will return (10, 24).

This function is an example of a multi-returning function, where we return multiple values as a tuple. In Go, multiple return values are common and can be used to return related values together, making the code more readable and expressive.

Note that in Go, we don't need to specify the return types of the function in the function declaration, as the return values are inferred from the expressions in the return statement.

Overall, this function demonstrates a simple and elegant way to calculate the sum and product of a given list of integers in Go.














































































































































































