    // Since all the numbers have to be n-digit long, and they start or end with 1,
    // it means that there are always at least 1 digit, which is 1, at the beginning.
    // So, we can start from n = 1, which is the only 1 digit long number that starts and ends with 1.
    // Then, for each n, we can find the next n-digit number that starts or ends with 1 by multiplying the previous number with 10, and adding 1.
    // For example, for n = 2, the next number is 101.
    // We can keep on doing this until we reach the end of the range of n.
    // The total count of the numbers is the sum of the count at each step, which is 10^(n-1).
    // So, the answer is Î£(10^(n-1)), from n = 1 to n = N.
    return int(math.Pow(10, float64(n-1)) * (n-1))
}

// Test
func main() {
    fmt.Println(StartsOneEnds(4))  // 40
}






































































































































































































































