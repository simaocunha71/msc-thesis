To determine if a number is prime, we need to check if it is divisible by any number from 2 to the square root of the number. If the number is divisible by any of these, it is not prime. Otherwise, it is prime.
Here's a step-by-step explanation of the code provided:

1. The function `is_prime` takes a single argument, `n`, which is the number we want to check for primality.
2. We initialize the variable `i` to 2, as it is the smallest prime number and the smallest divisor of any composite number.
3. The `while` loop continues until `i` is greater than the square root of `n`. This is because if `n` is divisible by a number greater than its square root, it must also be divisible by a number less than or equal to its square root.
4. Inside the `while` loop, we check if `n` is divisible by `i` using the modulo operator (`%`). If the result is 0, it means `n` is divisible by `i`, and therefore not prime. In this case, we return `False`.
5. If `n` is not divisible by `i`, we increment `i` by 1 and continue to the next iteration of the `while` loop.
6. If the `while` loop completes without finding any divisors of `n`, we can conclude that `n` is prime, and we return `True`.
7. The provided test cases are included to demonstrate the functionality of the `is_prime` function.

Overall, the `is_prime` function correctly determines whether a given number is prime or not, and returns the appropriate result.



































































































































