Hexagonal numbers are generated by adding consecutive odd numbers starting with 1. Here's the function:

```python
def hexagonal_num(n):
    return n * (3 * n + 1) // 2
```

In this function, we use the fact that the nth hexagonal number is equal to the sum of the first n odd numbers. To find the sum of the first n odd numbers, we can use the formula `(n * (2 * n + 1)) / 2`. To find the nth hexagonal number, we multiply this sum by 3 and divide by 2.

For example, if we call `hexagonal_num(10)`, it will return `190`. This is because the first 10 odd numbers are `1, 3, 5, 7, 9, 11, 13, 15, 17, 19`, and their sum is `104`. Multiplying this sum by 3 and dividing by 2 gives us `190`.

You can use this function to find any nth hexagonal number by passing the value of `n` as an argument to the function.

```python
print(hexagonal_num(10))  # Output: 190
```

Here's a step-by-step breakdown of how the function works:

1. The function `hexagonal_num` takes an integer `n` as an argument.
2. It uses the formula `(n * (2 * n + 1)) / 2` to calculate the sum of the first `n` odd numbers. This formula is derived from the sum of an arithmetic series.
3. It multiplies the sum by 3 to get the nth hexagonal number. The reason for this is that a hexagonal number is the sum of the first `n` odd numbers, and multiplying by 3 gives the sum of the first `n` odd numbers multiplied by 3.
4. It divides the result by 2 to get the nth hexagonal number.
5. The function returns the result as the output.

By following this process, you can find the nth hexagonal number using the provided function.

Note that the function assumes