def bell_Number(n):
    if n == 0:
        return 1
    else:
        return sum(bell_Number(i) for i in range(n))


# Driver code
print(bell_Number(2))




"""
The Bell numbers enumerate the number of ways to partition a set of n elements.

A partition of a set is a way of dividing the elements of the set into subsets.

For example, the Bell number B(5) = 52, which means there are 52 possible ways to partition a set with five elements.

The first few Bell numbers are 1, 2, 5, 15, 52, ... (sequence A000798 in the OEIS).

The Bell polynomial B_n(x) = x^n + B_(n−1)(x) * x^(n−1) + ... + B_(0)(x) * x^0, where B_(k)(x) is the Bell polynomial of degree k.

For example, B_(2)(x) = x^2 + B_(1)(x) * x^1 + B_(0)(x) * x^0, which simplifies to x^2 + x + 1.

The Bell numbers can be computed by the Bell triangle, which is formed by taking the convolution of the rows of Pascal's triangle.
"""




























































































































































































