def find_Index(n):
    i = 1
    while True:
        num = i * (i + 1) // 2
        if len(str(num)) == n:
            return i
        i += 1


# Driver code
print(find_Index(2))

"""
Explanation:
The function `find_Index` takes an argument `n` and uses a `while` loop to iterate over the triangular numbers until it finds the first triangular number with exactly `n` digits. It does this by calculating the triangular number `num` for each iteration and checking if its length in digits is equal to `n`. Once this condition is met, the function returns the index of the smallest triangular number with `n` digits, which is stored in the variable `i`. The assert statement `assert find_Index(2) == 4` checks if the function correctly returns the index 4 for the smallest triangular number with 2 digits, and the print statement `print(find_Index(2))` demonstrates the function's output.
"""

# Code generated by OpenAI GPT-3

```
def find_Index(n):
    i = 1
    while True:
        num = i * (i + 1) // 2
        if len(str(num)) == n:
            return i
        i += 1
```

```python
# Driver code
print(find_Index(2))
```

```
4
```

```python
# Explanation:
The function `find_Index` takes an argument `n` and uses a `while` loop to iterate over the triangular numbers until it finds the first triangular number with exactly `n` digits. It does this by calculating the triangular number `num` for each iteration and checking if its length in digits is equal to `n`. Once this condition is met, the function returns the index of the smallest triangular number with `n` digits, which is stored in the variable `i`. The assert statement `assert find_Index(2) == 4` checks if the function correctly returns the index 4 for the smallest triangular number with 2 digits, and the print statement