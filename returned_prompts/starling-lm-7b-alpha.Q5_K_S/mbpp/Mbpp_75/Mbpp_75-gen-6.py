from collections import Counter


def find_tuples(l, k):
    res = []
    for t in l:
        if all(i % k == 0 for i in t):
            res.append(t)
    return res


# print(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))
# print(find_tuples([(2, 2, 2), (2, 3, 2), (3, 2, 2)], 2))
# print(find_tuples([(1, 1, 1), (1, 2, 1), (2, 1, 1)], 1))


"""
Given an integer n, find a sequence of length n such that all integers in the sequence are distinct.

The sequence should be printed row by row in the following format:

1 2 3 4 5 ...
6 7 8 9 10 ...
...

Explanation:
The sequence is generated by using a cartesian product of different ranges.
For example, for n = 6, we create a cartesian product of the ranges (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6).
This is equivalent to a cross product of vectors in 2D space.

The cartesian product of two ranges (a, b) and (c, d) is a set of all ordered pairs (a, c), (a, d), (b, c), (b, d).
For example, the cartesian product of (1, 2) and (3, 4) is {(1, 3), (1, 4), (2, 3), (2, 4)}.

The cartesian product of multiple ranges can be computed by iteratively creating a new range that starts from the last element of the previous range and incrementing by 1, and then taking the cartesian product of this new range with the previous ranges.

To print the sequence row by row, we can use nested loops to iterate