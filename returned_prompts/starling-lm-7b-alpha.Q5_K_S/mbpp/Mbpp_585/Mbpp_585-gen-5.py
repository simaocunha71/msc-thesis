def expensive_items(dataset, n):
    data = sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]
    return data

expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)

# Output:
[{'name': 'Item-2', 'price': 555.22}]



Explanation:
The function expensive_items takes two parameters: dataset and n. The dataset parameter is a list of dictionaries, where each dictionary represents an item with a name and a price. The n parameter is the number of most expensive items that we want to find.

Inside the function, we use the sorted function to sort the dataset based on the 'price' key in descending order. The lambda function is used as the key function to sort the dataset based on the 'price' key. We then use the slice notation [:n] to get the first n most expensive items from the sorted dataset.

Finally, we return the resulting list of n most expensive items.

In the given example, we call the expensive_items function with the dataset [{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}] and n=1. The function returns [{'name': 'Item-2', 'price': 555.22}], which is the most expensive item in the dataset.





























































































































































