```
def remove_nested(t):
    if isinstance(t, tuple):
        return tuple(remove_nested(i) if isinstance(i, tuple) else i for i in t)
    else:
        return t


assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
```

This function uses recursion to go through the tuple and remove tuples within tuples. It checks if the current element is a tuple and if it is, it recursively calls itself to remove any tuples within the tuple. If the current element is not a tuple, it is just added to the new tuple.

Here's a breakdown of the code:

1. The function `remove_nested` takes a tuple `t` as an argument.
2. It first checks if the current element `t` is a tuple using the `isinstance` function. If it is, the function recursively calls itself for each element in the tuple.
3. If the current element is not a tuple, it is added to the new tuple using a generator expression.
4. The `remove_nested` function returns the new tuple.
5. The `assert` statement is used to test the function with the provided example `(1, 5, 7, (4, 6), 10)` and checks if the result is `(1, 5, 7, 10)`.

This solution effectively removes any tuples within tuples from the given tuple, while maintaining the order and structure of the original tuple.





















































































































































