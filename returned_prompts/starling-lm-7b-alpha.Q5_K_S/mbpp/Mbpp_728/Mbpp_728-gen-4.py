def sum_list(list1, list2):
    # your code here
    return [a+b for a, b in zip(list1, list2)]


def test_sum_list():
    assert sum_list([10,20,30],[15,25,35])==[25,45,65]

if __name__ == '__main__':
    test_sum_list()


"""
In the above problem, you are asked to implement a function that takes two lists as input and returns a new list such that the nth element of the new list is the sum of the nth elements of the input lists. Here is a step-by-step guide on how to implement this function.

First, you can define a function called sum_list that takes two lists as input. Inside this function, you can use the zip function to iterate over the two input lists simultaneously. The zip function will return an iterator of tuples where the ith tuple contains the ith element from each of the input lists. You can then use a list comprehension to create a new list where each element is the sum of the corresponding elements in the input lists. Finally, you can return this new list as the output of the function.

To test the implementation of the function, you can define a test_sum_list function that calls sum_list with two example lists and asserts that the result is equal to the expected output. If the function is implemented correctly, this assertion should pass and the test should succeed.
"""








































































































































































