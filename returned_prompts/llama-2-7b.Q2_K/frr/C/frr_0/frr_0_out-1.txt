
The following are some of the requirements:
• The program should be modularized into several classes, each with one or more functions that will perform a specific task. Each class should have its own header file, and all the source files should be in one directory.
• Include the header files in the source code listing (e.g., #include “header_file.h”).
• All variables and constants defined inside the program should be declared at the top of the code section with their appropriate type and size, as shown below:
int main(void) { /* int main() */
char buf[1024]; // char buffer to store data from remote server
int i; // counter for block list update
int total_packets = 0; // count of packets sent to the server
int total_failed = 0; // count of packets failed by the system
int total_successful = 0; // count of successful packets
char* errmsg; /* error message from server */
int c; // counter for block list update
int blocklist[256]; // array to store new ip addresses
int iplist[256]; // array to store old ip addresses
int j; /* counter for block list update */
int total_failed = 0; // count of packets failed by the system}
• Functions that perform specific tasks should be declared at the top of their code sections with their appropriate type and size, as shown below:
void print_packets(char* packet) { /* function to print packets */
int i; /* counter for block list update */
int total_failed = 0; // count of packets failed by the system}
int total_successful = 0; // count of successful packets }
int total_packets = 1; // count of packets sent to the server
int total_blocked = 0; /* count of blocked packets */
char* errmsg; /* error message from server */
int c; /* counter for block list update */
int j; /* counter for block list update */ }
• All global variables should be declared at the top of their code sections with their appropriate type and size, as shown below:
void print_packets(char* packet) { /* function to print packets */ char buf[1024]; // char buffer to store data from remote server int i;