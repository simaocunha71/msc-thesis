


Here is a basic outline of how the script might look like:
```python
import pcapy
import iptc
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(filename='firewall.log', level=logging.INFO)

# Initialize pcapy
pc = pcapy.open_live('eth0', 1500, 1, 0)

def packet_handler(hdr, pkt):
    # Analyze packet
    pkt_info = pc.getpacket(pkt)
    source_ip = pkt_info.get_src_ip_str()
    dest_ip = pkt_info.get_dst_ip_str()
    source_port = pkt_info.get_src_port()
    dest_port = pkt_info.get_dst_port()
    protocol = pkt_info.get_protocol()
    packet_length = len(pkt)

    # Check if packet is suspicious
    if is_suspicious(source_ip, dest_ip, source_port, dest_port, protocol, packet_length):
        # Block packet
        block_packet(source_ip, dest_ip)

        # Log alert
        logging.info('{}: Suspicious packet detected from {} to {}'.format(datetime.now(), source_ip, dest_ip))

pc.loop(-1, packet_handler)
```

Please note that this is a basic outline and does not include the implementation of the `is_suspicious` and `block_packet` functions, which would depend on your specific rules for determining suspicious packets.

The `is_suspicious` function would analyze the packet information based on your rules and return True if the packet is suspicious, and False otherwise. The `block_packet` function would use the iptables library to insert a rule to block traffic from the source IP to the destination IP.

Please note that running this script requires root privileges because it needs to use the pcapy library to capture network packets and the iptables library to modify firewall rules.

Also, the pcapy library is not available in Python and needs to be installed separately, and you