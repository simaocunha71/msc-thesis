


Here is a simple example of how you might implement this:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class KeyRotation {
    private static final String ALGORITHM = "AES";
    private static SecretKey secretKey;

    static {
        try {
            // Generate a new key every 24 hours
            KeyGenerator keyGenerator = KeyGenerator.getInstance(ALGORITHM);
            keyGenerator.init(128); // for example
            secretKey = keyGenerator.generateKey();
        } catch (NoSuchAlgorithmException e) {
            // Handle exception
        }
    }

    public static SecretKey getKey() {
        return secretKey;
    }

    public static String encrypt(String plainText, SecretKey secretKey) {
        try {
            byte[] plainTextByte = plainText.getBytes();
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedByte = cipher.doFinal(plainTextByte);
            Base64.Encoder encoder = Base64.getEncoder();
            return encoder.encodeToString(encryptedByte);
        } catch (Exception e) {
            // Handle exception
        }
        return null;
    }

    public static String decrypt(String encryptedText, SecretKey secretKey) {
        try {
            Base64.Decoder decoder = Base64.getDecoder();
            byte[] encryptedTextByte = decoder.decode(encryptedText);
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
            return new String(decryptedByte);
        } catch (Exception e) {
            // Handle