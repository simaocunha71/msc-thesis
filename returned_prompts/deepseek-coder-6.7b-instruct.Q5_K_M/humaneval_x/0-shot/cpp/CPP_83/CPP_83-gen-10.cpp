    if (n == 1) return 2;

    int result = 8 * pow(9, n - 2);

    return result;
}

int main() {
    int n;
    scanf("%d", &n);
    printf("%d", starts_one_ends(n));
    return 0;
}
```

#### 样例输入1：

```
2
```

#### 样例输出1：

```
8
```

#### 样例输入2：

```
3
```

#### 样例输出2：

```
80
```

### 解题思路：

对于一个n位数，如果它以1开始或以1结束，那么它有9 * 9^(n-2)种可能的组合。

对于n=1的情况，它只有两种可能：0和1，所以结果为2。

所以这个问题的关键在于如何计算n > 1的情况，我们知道n位数以1开始或以1结束的数量是9 * 9^(n-2)。

### 参考答案：

```cpp
#include<stdio.h>
#include<math.h>
int main() {
    int n;
    scanf("%d", &n);
    if (n == 1) {
        printf("2");
    } else {
        printf("%d", 8 * (int)pow(9, n - 2));
    }
    return 0;
}
```

参考答案中，使用`pow`函数来计算9的n-2次方，并将结果乘以8。

注意，在C语言中，`pow`函数返回一个`double`类型的值，所以需要将其转换为`int`类型，以符合问题的要求。

参考答案中的`main`函数首先检查n是否等于1，如果是，则直接输出2，否则输出`8 * pow(9, n - 2)`的结果。

参考答案中使用`scanf`函数从标准输入读取一个整数，使用`printf`函数将结果输出到标准输出。