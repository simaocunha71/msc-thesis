
	min, max := math.Inf(1), -math.Inf(1)

	for _, num := range numbers {
		if num < min {
			min = num
		}
		if num > max {
			max = num
		}
	}

	rescaled := make([]float64, len(numbers))
	for i, num := range numbers {
		rescaled[i] = (num - min) / (max - min)
	}

	return rescaled
}

```

The function `RescaleToUnit` first calculates the minimum and maximum of the input array. Then it creates a new array and fills it with the rescaled numbers.

The rescaling of a number `num` to the unit interval `[0, 1]` is done by subtracting the minimum `min` from `num` and dividing the result by the range `(max - min)`.

The function returns the rescaled array.

The time complexity of the function is O(n) because it iterates over the input array twice: once to find the minimum and maximum, and once more to rescale the numbers. The space complexity is also O(n) because it creates a new array of the same size as the input array.
























































































































































































































