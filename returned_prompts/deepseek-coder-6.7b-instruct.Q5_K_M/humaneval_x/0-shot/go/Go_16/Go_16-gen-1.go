    str = strings.ToLower(str)
    count := 0
    m := make(map[rune]bool)

    for _, char := range str{
        if _, ok := m[char]; !ok {
            m[char] = true
            count++
        }
    }
    return count
}

func main(){
    fmt.Println(CountDistinctCharacters("xyzXYZ")) // output: 3
    fmt.Println(CountDistinctCharacters("Jerry")) // output: 4
}
```

This Go program uses a map to keep track of distinct characters in the string. It converts the string to lowercase to ignore case sensitivity. For each character in the string, it checks if the character is already in the map. If the character is not in the map, it adds the character to the map and increments the count. Finally, it returns the count.

The time complexity of this solution is O(n), where n is the length of the string, because it iterates over the string once. The space complexity is also O(n), because in the worst case, each character in the string could be unique, and the map would need to store n elements.












































































































































































































































