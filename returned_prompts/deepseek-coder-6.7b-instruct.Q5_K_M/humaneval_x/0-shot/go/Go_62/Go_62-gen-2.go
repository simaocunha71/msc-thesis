
	res := make([]int, len(xs)-1)
	for i := 1; i < len(xs); i++ {
		res[i-1] = xs[i] * i
	}
	return res
}

```

## 解释

给定一个系数数组 `xs`，表示多项式 `xs[0] + xs[1]*x + xs[2]*x^2 + ...`。

该函数计算该多项式的导数。导数是一个多项式，其中每个项的系数乘以项的指数（项的变量的幂次），然后减去1。

例如，对于多项式 `3 + 2x + x^2 + 4x^3 + 5x^4`，导数变为 `2 + 8x + 6x^2 + 12x^3 + 20x^4`。

在这个函数中，`res` 是保存结果的数组。在循环中，我们从第二个元素开始迭代 `xs`，因为第一个元素没有变量 `x`，所以它的导数为0。在每次迭代中，我们将当前系数乘以其指数（即索引 `i`），并将结果存储在 `res` 的下一个索引中。

最后，我们返回 `res`，它是给定多项式的导数。

该函数的时间复杂度为 O(n)，其中 `n` 是多项式的项数，因为我们需要遍历每个项来计算其导数。空间复杂度为 O(n)，因为我们需要存储导数多项式的系数。

## 测试用例

```go
func main() {
	fmt.Println(Derivative([]int{3, 1, 2, 4, 5}))  // 期望输出 [1, 4, 12, 20]
	fmt.Println(Derivative([]int{1, 2, 3}))  // 期望输出 [2, 6]
}
```

## 总结

该函数接受一个多项