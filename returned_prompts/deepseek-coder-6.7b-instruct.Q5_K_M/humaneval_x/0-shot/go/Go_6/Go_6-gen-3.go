    var levels []int
    groups := strings.Split(paren_string, " ")

    for _, group := range groups {
        max_level := 0
        current_level := 0

        for _, char := range group {
            if string(char) == "(" {
                current_level += 1
                max_level = int(math.Max(float6uf6, float64(max_level), float64(current_level)))
            } else if string(char) == ")" {
                current_level -= 1
            }
        }
        levels = append(levels, max_level)
    }
    return levels
}
```

This is a simple solution to find the maximum depth of nested parentheses in each group of parentheses. It uses the concept of "levels" to count the nesting depth. The function ParseNestedParens splits the input string into groups separated by spaces and then iterates over each group. For each group, it iterates over each character, incrementing the level count for each open parenthesis "(" and decrementing for each closed parenthesis ")". It keeps track of the maximum level count as it goes, which is the depth of the deepest nested parentheses. This maximum level count is then appended to the output levels slice.

I hope this helps clarify the solution.







































































































































































































