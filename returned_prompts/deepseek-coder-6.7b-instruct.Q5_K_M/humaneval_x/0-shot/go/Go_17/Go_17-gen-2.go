
	notes := []int{}
	note_map := map[rune]int{'o':4, 'o':2, '.':1}

	for _, note := range music_string {
		notes = append(notes, note_map[note])
	}

	return notes
}

func main() {

	music := "o o| .| o| o| .| .| .| .| o o"
	fmt.Println(ParseMusic(music))

}
```

This solution uses a map to map ASCII characters to their corresponding beat durations. It then iterates over the input string, appending the corresponding beat duration to the output list.

You can run it in any go environment. The output of the program will be the list of beats for each note in the input string.

It's worth noting that this solution assumes that the input string will always be correctly formatted. If this is not the case, you may want to add some error checking to handle invalid input.

Also, this solution doesn't account for any additional symbols that may appear in the input string. If you want to account for these, you'll need to add additional entries to the `note_map`.

This solution is simple and easy to understand, but it might not be the most efficient for large inputs. If you need to optimize it for large inputs, you might need to use a different approach.

I hope this helps to understand how you can parse a string in Go. If you have any more questions, please let me know.

































































































































































