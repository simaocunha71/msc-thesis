
	count := 0
    length := len(substring)

	for i := 0; i <= len(str)-length; i++ {
		if str[i:i+length] == substring {
			count++
		}
	}
	return count
}
```

This code works by iterating over the original string, and checking every substring of the same length as the substring you're looking for. If the substring matches the substring you're looking for, it increments the count. It then returns the count after it has checked every possible substring.

This solution allows for overlaping cases, as it starts checking from the beginning of the original string to the end, always advancing by one character.

Note that this solution is not case-sensitive. If you want it to be case-sensitive, you can simply change the comparison to use `==` instead of `==`.

Also note that this solution assumes that the substring is not longer than the original string. If this is not the case, you should add a check to handle that case.












































































































































































































































































