
// Initialize a counter to 0
    counter := 0

// Check if the substring is not empty
    if substring != "" {

// Iterate over the string with a sliding window of the length of the substring
        for i := 0; i <= len(str)-len(substring); i++ {

// If the substring from the current position with the length of the substring equals the substring, increment the counter
            if str[i:i+len(substring)] == substring {
                counter++
            }
        }
    }

// Return the counter
    return counter
}

// Example usage:
fmt.Println(HowManyTimes("", "a")) // Outputs: 0
fmt.Println(HowManyTimes("aaa", "a")) // Outputs: 3
fmt.Println(HowManyTimes("aaaa", "aa")) // Outputs: 3

// This solution has a time complexity of O(n) where n is the length of the string. The space complexity is O(1) as it only uses a constant amount of space.

```


























































































































































































































































