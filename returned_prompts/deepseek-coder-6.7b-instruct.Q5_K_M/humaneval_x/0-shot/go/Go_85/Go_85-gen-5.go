
	total := 0
  
	for i := 1; i < len(lst); i += 2 {
		if lst[i] % 2 == 0 {
			total += lst[i]
		}
	}
	
	return total
}

func main() {
	fmt.Println(Add([]int{4, 2, 6, 7})) // Expected output 2
}

```

This program adds up the even numbers in the array that are at odd indices. The function `Add` iterates through the list, checking each element at an odd index to see if it is even. If it is, it adds it to a running total. The total is then returned by the function.

The main function then tests the `Add` function with the array `[4, 2, 6, 7]`, which should result in 2, since the only even number at an odd index is 2.

Note that in Go, array indices start at 0. So an index of 1 refers to the second element in the array, not the first.

Also, the `%` operator is used to get the remainder of the division of the current index by 2. If the remainder is 0, the number at that index is even. If the remainder is 1, the number at that index is odd.

The function `Add` then returns the total sum of the even numbers at odd indices in the given list.






















































































































































































