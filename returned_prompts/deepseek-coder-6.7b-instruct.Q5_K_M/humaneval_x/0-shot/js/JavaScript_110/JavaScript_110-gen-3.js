  const oddLst1 = lst1.filter(num => num % 2 !== 0);
  const evenLst2 = lst2.filter(num => num % 2 === 0);

  return oddLst1.length <= evenLst2.length ? "YES" : "NO";
}

console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // "YES"
console.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // "NO"


In this solution, we first filter the odd numbers from lst1 and even numbers from lst2. If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, we return "YES". Otherwise, we return "NO".
This solution works because we can always make lst1 consist of only even numbers by exchanging an odd number from lst1 with an even number from lst2.

The time complexity of this solution is O(n) because we need to traverse through both lst1 and lst2. The space complexity is also O(n) because we are storing the odd numbers from lst1 and even numbers from lst2.
*/

// Do not edit this line;
module.exports = exchange;



























































































































































































