  let str = lst[0] + lst[1];
  let stack = [];

  for (let i = 0; i < str.length; i++) {
    if (str[i] === '(') {
      stack.push(str[i]);
    } else if (str[i] === ')') {
      if (stack.length === 0) {
        return 'No';
      } else {
        stack.pop();
      }
    }
  }

  return stack.length === 0 ? 'Yes' : 'No';
};

console.log(matchParens(['()(', ')'])); // Yes
console.log(matchParens([')', ')'])); // No

This solution uses a stack data structure to keep track of open parentheses. It iterates through the string and pushes open parentheses onto the stack, and pops them off when it encounters a closed parenthesis. If it encounters a closed parenthesis when the stack is empty, it immediately returns 'No' as this means the string is not balanced. Finally, it returns 'Yes' if the stack is empty (i.e., all parentheses were balanced) and 'No' otherwise.






































































































































































































































