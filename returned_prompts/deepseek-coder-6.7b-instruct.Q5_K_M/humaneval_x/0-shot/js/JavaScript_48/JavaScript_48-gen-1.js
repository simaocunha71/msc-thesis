  const reversedText = text.split('').reverse().join('');
  return text === reversedText;
};



// To test this function
console.log(isPalindrome('')); // true
console.log(isPalindrome('aba')); // true
console.log(isPalindrome('aaaaa')); // true
console.log(isPalindrome('zbcd')); // false
console.log(isPalindrome('madam')); // true
console.log(isPalindrome('12321')); // true
```

In this solution, the function `isPalindrome` takes a string as an argument and returns a boolean indicating whether the string is a palindrome. It does this by first reversing the string using the `reverse()` method, and then checking if the reversed string is equal to the original string. If they are equal, the function returns `true`, otherwise it returns `false`.


The time complexity of this solution is O(n), where n is the length of the string. This is because we need to split the string into an array, reverse the array, and then join it back together.


The space complexity of this solution is also O(n), because we need to create a new array to hold the reversed string.


This solution is case sensitive, meaning it will treat uppercase and lowercase letters as different characters. If you want to ignore case, you can modify the function to convert the string to either all lowercase or all uppercase before reversing and checking.
*/


































































































































































