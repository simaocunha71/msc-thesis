  let sum = 0;

  for (let i = 0; i < lst.length; i++) {
    let rounded = Math.ceil(lst[i]);
    sum += rounded * rounded;
  }

  return sum;
}

console.log(sumSquares([1,2,3])); // 14
console.log(sumSquares([1,4,9])); // 98
console.log(sumSquares([1,3,5,7])); // 84
console.log(sumSquares([1.4,4.2,0])); // 29
console.log(sumSquares([-2.4,1,1])); // 6

// The function sumSquares first initializes a variable sum to 0. 
// It then iterates over the input list lst, for each element it rounds up to the nearest integer using Math.ceil() and then squares the result by multiplying it with itself, 
// then adds it to the sum. 
// Finally it returns the sum.

// Time complexity is O(n) as it only requires a single pass over the list.
// Space complexity is O(1) as it only uses a constant amount of space to store the sum and the rounded element.


















































































































































































































