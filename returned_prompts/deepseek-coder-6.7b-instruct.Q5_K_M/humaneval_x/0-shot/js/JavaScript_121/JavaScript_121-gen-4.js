  let sum = 0;
  for (let i = 0; i < lst.length; i += 2) {
    if (lst[i] % 2 === 1) {
      sum += lst[i];
    }
  }
  return sum;
}

console.log(solution([5, 8, 7, 1])) //==> 12
console.log(solution([3, 3, 3, 3, 3])) //==> 9
console.log(solution([30, 13, 24, 321])) //==>0

//The function solution starts by initializing a variable sum to 0, which will keep track of the total sum of odd numbers in even positions.

//It then goes through the list lst in steps of 2 (i.e., every other element, starting from the first). For each element, it checks whether it is odd (i.e., has a remainder of 1 when divided by 2), and if so, adds it to the sum.

//Finally, it returns the sum.

//The time complexity of this function is O(n), where n is the length of the list lst, because it needs to go through all the elements of the list once.

//The space complexity is O(1), because it uses a constant amount of additional space (the variable sum), regardless of the size of the input list.

























































































































































































