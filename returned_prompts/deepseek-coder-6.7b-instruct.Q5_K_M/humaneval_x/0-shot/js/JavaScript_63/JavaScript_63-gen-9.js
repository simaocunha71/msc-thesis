  if (n < 0)  {
    return 'Invalid input';
  } else if (n === 0 || n === 1) {
    return 0;
  } else if (n === 2) {
    return 1;
  } else {
    let fibfibSequence = [0, 0, 1];
    for (let i = 3; i <= n; i++) {
      fibfibSequence[i] = fibfibSequence[i-1] + fibfibSequence[i-2] + fibfibSequence[i-3];
    }
    return fibfibSequence[n];
  }
};

console.log(fibfib(1)); // 0
console.log(fibfib(5)); // 4
console.log(fibfib(8)); // 24

This solution uses an array to store the fibfib numbers up to n-th term. This is an efficient solution as it avoids redundant computation of fibfib numbers by storing them in an array. The time complexity of this solution is O(n).

This solution assumes that the input n is a non-negative integer. If the input is not a non-negative integer, the solution returns the message 'Invalid input'.

This solution is implemented in JavaScript. If you need a solution in a different programming language, please let me know.





































































































































































































