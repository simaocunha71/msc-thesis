  let arr = Array.from(String(n), Number);
  let oddArr = arr.filter(num => num % 2 !== 0);
  
  if(oddArr.length === 0) {
    return 0;
  } else {
    return oddArr.reduce((acc, curr) => acc * curr, 1);
  }
}

console.log(digits(1));  // 1
console.log(digits(4));  // 0
console.log(digits(235)); // 15


The logic here is to first convert the number to an array of its digits, then filter that array to get only the odd digits. If there are no odd digits, return 0, otherwise, return the product of all the odd digits.
The reduce function here is used to get the product of the array elements.
The reduce function takes an array and a callback function (in this case, an arrow function) as arguments. The callback function takes two arguments: the accumulator (acc) and the current value (curr). The accumulator is the value that gets returned from the callback function on each iteration, and it starts with the value that is provided as the second argument to the reduce function. The current value is the current element being processed in the array.
In this case, the accumulator is initialized with 1 (as that's the identity of multiplication), and on each iteration, it's multiplied by the current value, resulting in the product of all the array elements.
*/

































































































































































