let noEven = x.filter((num) => {
    return !(num.toString().includes('2') || num.toString().includes('4') || num.toString().includes('6') || num.toString().includes('8') || num.toString().includes('0'));
  })
  
  return noEven.sort((a, b) => a - b);
}

console.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]
console.log(uniqueDigits([152, 323, 1422, 10])); // []

This solution works by first filtering out the numbers that contain any even digit (2, 4, 6, 8, 0). Then it sorts these remaining numbers in ascending order. 

Note: The sort() method sorts the elements of an array in place and returns the array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code unit values.

The sort() method does not sort numbers, it sorts strings. That's why we use the toString() method to convert the numbers into strings. After that, we can compare the UTF-16 code unit values to sort the numbers in ascending order.
  
*/












































































































































































































