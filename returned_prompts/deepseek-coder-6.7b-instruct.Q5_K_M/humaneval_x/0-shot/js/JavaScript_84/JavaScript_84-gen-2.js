  let binary = N.toString(2);
  let sum = 0;
  for(let i = 0; i < binary.length; i++){
    sum += Number(binary[i]);
  }
  return sum.toString(2);
}

console.log(solve(1000)); // "1"
console.log(solve(150)); // "110"
console.log(solve(147)); // "1100"

// This solution converts the given integer to binary, then iterates through the binary string 
// adding up the digits to a sum variable. Finally, it converts the sum to binary and returns it.
// The result is a binary representation of the sum of the digits of the initial number in binary.
// Time complexity: O(n), where n is the number of digits in the binary representation of the number.
// Space complexity: O(n), where n is the number of digits in the binary representation of the number.
// This is because we need to store the binary representation of the number and the sum.




































































































































































































































































