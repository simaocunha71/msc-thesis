let stack = [];
let result = [];
let temp = '';
for (let i = 0; i < paren_string.length; i++) {
    if (paren_string[i] === '(') {
        stack.push(paren_string[i]);
        temp += paren_string[i];
    } else if (paren_string[i] === ')') {
        stack.pop();
        temp += paren_string[i];
        if (stack.length === 0) {
            result.push(temp);
            temp = '';
        }
    }
}
return result;
}
console.log(separateParenGroups('(  )  (( ))  (( )( ))'));

This function iterates over the input string and pushes each "(" onto a stack. When it encounters a ")", it pops the last item from the stack and adds to the current group. When the stack is empty, it means the current group has ended, so it adds the group to the result array and resets the group string.
The result array will contain the separate groups of balanced parentheses.
*/
























































































































































































































































