  if(arr.length === 0) return true;

  let shift = 0;
  for(let i = 0; i < arr.length - 1; i++){
    if(arr[i] > arr[i+1]){
      shift++;
    }
  }

  if(arr[arr.length - 1] > arr[0]){
    shift++;
  }

  return shift <= 1;
}

console.log(moveOneBall([3, 4, 5, 1, 2])) // true
console.log(moveOneBall([3, 5, 4, 1, 2])) // false

This function works by first checking if the array length is 0, if so, it returns true. Then it goes through the array, counting the number of times the current element is larger than the next. It also checks if the last element is larger than the first, and if so, it increments the shift count. Finally, it returns whether the shift count is less than or equal to 1.

This works because in a sorted array, every element should be smaller than or equal to the next one. If the last element is larger than the first, this means we've performed a right shift. So, the maximum number of shifts needed to sort the array is 1.

In the case where the array is already sorted or almost sorted, the function returns true. In all other cases, it returns false.
*/

















































































































































































