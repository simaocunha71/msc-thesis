  let sum = 0;
  for (let i = 0; i < k; i++) {
    let num = arr[i];
    if (num.toString().length <= 2) {
      sum += num;
    }
  }
  return sum;
};

console.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // 24
console.log(addElements([1,2,3,4,5], 3)); // 6
console.log(addElements([100, 200, 300, 400, 500], 5)); // 1500
```

## 解题思路
这个问题要求我们从数组的前 k 个元素中，找出数字的位数不超过两位的元素，并将它们相加。

在 JavaScript 中，我们可以使用 `toString()` 方法将数字转换为字符串，然后获取该字符串的长度。如果字符串的长度小于或等于 2，就意味着该数字的位数不超过两位。

然后，我们遍历数组的前 k 个元素，如果元素的位数不超过两位，我们就将它加到 sum 中。

在遍历完前 k 个元素后，我们返回 sum，这就是我们要找的结果。

## 复杂度分析
这个解法的时间复杂度是 O(n)，其中 n 是数组的长度。这是因为我们只对数组进行了一次遍历。

空间复杂度是 O(1)，这是因为我们只使用了一个变量来保存结果，这与输入的大小无关。

## 注意
这个解法假设了数组中的所有元素都是正整数。如果数组中可能包含负数或非整数，我们需要相应地修改解法。

如果数组中的数字可能有多于两位，我们也需要修改解法。例如，我们可能需要检查每个数字的位数，而不仅仅是将数字转换为字符串并获取其长度。
*/

function addElements(arr, k)