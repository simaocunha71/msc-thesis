  let prefixes = [];
  for (let i = 0; i < string.length; i++) {
    prefixes.push(string.slice(0, i + 1));
  }
  return prefixes;
}

console.log(allPrefixes('abc'))
// expected output: ['a', 'ab', 'abc']


// The above solution is correct but it is not efficient. The time complexity is O(n^2) due to the use of slice.
// We can improve this to O(n) by using the substring method.

const allPrefixesEfficient = (string) => {
  let prefixes = [];
  for (let i = 0; i < string.length; i++) {
    prefixes.push(string.substring(0, i + 1));
  }
  return prefixes;
}

console.log(allPrefixesEfficient('abc'))
// expected output: ['a', 'ab', 'abc']

// Now the function runs in linear time, which means it scales well with the input size.








































































































































































































































































