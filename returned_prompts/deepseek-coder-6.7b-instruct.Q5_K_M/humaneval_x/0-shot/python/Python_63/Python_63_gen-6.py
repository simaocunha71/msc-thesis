
    def fibfib(n: int):
        fib = [0, 0, 1]
        for i in range(3, n+1):
            fib.append(fib[i-1] + fib[i-2] + fib[i-3])
        return fib[n]

    print(fibfib(1))  # 0
    print(fibfib(5))  # 4
    print(fibfib(8))  # 24


Explanation:

    This function uses dynamic programming to calculate the FibFib number sequence. The base case values are initialized in the list 'fib' and then for each value up to the given input 'n', the next value is calculated by summing the previous 3 values in the sequence. The nth FibFib number is then returned from the 'fib' list. This approach is efficient as it avoids the need for recursive calls which would otherwise be required for the FibFib number sequence and would take exponential time.
    The time complexity of this function is O(n) and the space complexity is also O(n).


























































































































































































































































