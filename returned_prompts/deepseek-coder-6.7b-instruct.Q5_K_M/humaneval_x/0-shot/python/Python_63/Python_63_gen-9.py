
```python
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        fib = [0, 0, 1]
        for i in range(3, n + 1):
            fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])
        return fib[n]
```

This function first handles the base cases. If `n` is 0 or 1, it returns 0. If `n` is 2, it returns 1. Then it uses a list to store the fibfib numbers as it computes them up to the `n`-th number. The list is initialized with the first three base numbers. It then loops from 3 to `n`, appending the sum of the last three numbers to the list each time. Finally, it returns the `n`-th fibfib number.

The time complexity of this function is O(n), as it needs to loop through `n` elements. The space complexity is also O(n), as it uses a list to store the computed fibfib numbers.

This function should work for all non-negative integer values of `n`.


























































































































































































































