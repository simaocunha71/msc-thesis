Here is a Python function to solve the problem:

```python
def all_prefixes(string: str) -> List[str]:
    return [string[:i] for i in range(1, len(string) + 1)]
```

This function uses list comprehension to generate a list of prefixes. The range starts from 1 (not 0 to avoid empty string as a prefix) and ends at the length of the string plus 1 (to include the string itself as a prefix). The `string[:i]` part creates the prefix by taking a slice of the string from the start up to index `i`.

For example, if the input string is 'abc', the list returned by the function is `['a', 'ab', 'abc']`.

Please note that this function returns a list of strings, not a list of characters. If you want a list of characters, you would have to slightly modify the function to use `list(string[:i])` instead of `string[:i]`.

Also, please note that this function does not return the input string itself as a prefix. If you want to include the input string itself as a prefix, you would have to modify the function to append the input string to the list at the end, like so: `[string[:i] for i in range(1, len(string) + 1)] + [string]`.

Note: The `typing` module is used for type hinting. It is not required for the function to work, but it is a good practice to use it.









































































































































































