        List<Integer> result = new ArrayList<>();
        result.add(0);
        result.add(0);
        
        String numStr = Integer.toString(Math.abs(num));
        for (char c : numStr.toCharArray()) {
            if ((c - '0') % 2 == 0) {
                result.set(0, result.get(0) + 1);
            } else {
                result.set(1, result.get(1) + 1);
            }
        }
        
        return result;
    }
}

Explanation:

We convert the integer to its absolute value (to handle negative numbers) and then convert it to a string. We then iterate through each character of the string, convert it back to an integer and check if it's even or odd. If it's even, we increment the first element of the result list (which stores the count of even numbers). If it's odd, we increment the second element of the result list (which stores the count of odd numbers). Finally, we return the result list.

Time complexity: O(n), where n is the number of digits in the number.
Space complexity: O(1), as we only use a constant amount of space to store the result.

This solution handles the case where the number is negative by converting it to its absolute value first.
 */







































































































































































































