The code you've written is already correct. It uses a for loop to sum all integers from 1 to n.

```java
    public int sumToN(int n)  {
        int sum = 0;
        for (int i=1; i<=n; i++) {
            sum += i;
        }
        return sum;
    }
```

This code will work as expected. The time complexity of the given solution is O(n), because it has a single loop that iterates n times. The space complexity is O(1), as it uses a constant amount of space to store the variable 'sum'.

In Java, the `return` statement is used to return the value from the method to the caller. In this case, it will return the variable 'sum', which contains the sum of all the numbers from 1 to n.

If you want to make it more efficient, you can use the formula for the sum of an arithmetic series: n*(n+1)/2. This will reduce the time complexity to O(1).

```java
    public int sumToN(int n)  {
        return n*(n+1)/2;
    }
```

This is the same algorithm but written more concisely.




















































































































































































