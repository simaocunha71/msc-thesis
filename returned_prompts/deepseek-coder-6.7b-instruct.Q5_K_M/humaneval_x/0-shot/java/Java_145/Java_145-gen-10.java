        List<Integer> result = new ArrayList<Integer>(nums);
        Collections.sort(result, new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                int sumA = sumOfDigits(a);
                int sumB = sumOfDigits(b);
                if (sumA != sumB) {
                    return sumA - sumB;
                } else {
                    return nums.indexOf(a) - nums.indexOf(b);
                }
            }
        });
        return result;
    }

    private int sumOfDigits(int n) {
        int sum = 0;
        while (n != 0) {
            sum += Math.abs(n % 10);
            n /= 10;
        }
        return sum;
    }
}

Here we define a method sumOfDigits() to calculate the sum of the digits of a number. We use it in the Comparator to compare the numbers by their sum of digits. If the sums are equal, we use the original list's index to determine the order. We use Collections.sort() to sort the list in-place.










































































































































































































































