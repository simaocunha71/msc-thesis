        Map<Integer, Long> counts = numbers.stream()
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        List<Integer> result = new ArrayList<>();
        for (Integer number : numbers) {
            if (counts.get(number) == 1) {
                result.add(number);
            }
        }
        return result;
    }
}

In the code above, we first count the occurrences of each number in the input list. Then we iterate over the original list and add elements to the result list if their count in the map is 1 (i.e., they occur only once). The order of elements in the result list is preserved by this approach.

This code uses Java 8 Streams and Collectors. It groups the numbers by their identity (i.e., by their value) and counts the occurrences of each number. The result is a map where the keys are the numbers from the input list and the values are their counts. We then iterate over the original list and add elements to the result list if their count in the map is 1. The order of the elements in the result list is preserved by this approach.

Please note that this solution assumes that the input list does not contain null values. If the list can contain null values, you would need to handle them separately.

Also, this solution has a time complexity of O(n) and a space complexity of O(n), where n is the size of the input list.

I hope this helps. Let me know if you have any further questions.






























































































































































