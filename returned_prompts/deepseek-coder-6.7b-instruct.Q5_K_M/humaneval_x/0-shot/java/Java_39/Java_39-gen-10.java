        int fib1 = 2, fib2 = 3;
        int fib3 = 0;
        int count = 2;

        if(n == 1) return fib1;
        if(n == 2) return fib2;

        while(count < n){
            fib3 = fib1 + fib2;
            fib1 = fib2;
            fib2 = fib3;

            if(isPrime(fib3)){
                count++;
            }
        }

        return fib3;
    }

    public boolean isPrime(int n){
        if(n <= 1) return false;

        for(int i = 2; i < n; i++){
            if(n % i == 0) return false;
        }

        return true;
    }

    public static void main (String[] args) throws java.lang.Exception {
        Solution solution = new Solution();
        System.out.println(solution.primeFib(1));
        System.out.println(solution.primeFib(2));
        System.out.println(solution.primeFib(3));
        System.out.println(solution.primeFib(4));
        System.out.println(solution.primeFib(5));
    }
}

This solution implements the primeFib method which calculates the n-th Fibonacci number that is also a prime number. The primeFib method uses a while loop to find the n-th prime Fibonacci number, and the isPrime method checks if a given number is prime.

The prime numbers are found by checking if the number is divisible by any number from 2 to the number itself, if it is, then it is not a prime number. If it is not divisible by any of these numbers, then it is a prime number.

The Fibonacci numbers are generated by starting with 2 and 3 (as these are the first two prime numbers) and adding the last two numbers to get the next one.

The primeFib method starts with the first two Fibonacci prime numbers (2 and 3) and then generates the next Fibonacci number by adding the last two