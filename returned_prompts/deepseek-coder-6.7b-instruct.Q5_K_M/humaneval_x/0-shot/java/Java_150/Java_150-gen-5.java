        boolean prime = isPrime(n);

        if(prime) {
            return x;
        } else {
            return y;
        }
    }

    public boolean isPrime(int num) {
        if(num <= 1) {
            return false;
        }

        for(int i = 2; i < num; i++) {
            if(num % i == 0) {
                return false;
            }
        }

        return true;
    }
}

In the above program, isPrime() function checks whether a given number is prime or not. If it is prime, xOrY() function returns the value of x, otherwise it returns the value of y.
The time complexity of the isPrime() function is O(n) and in the worst case, it is called n times in the xOrY() function. So, the worst-case time complexity of the entire program is O(n^2).



































































































































































































































































































