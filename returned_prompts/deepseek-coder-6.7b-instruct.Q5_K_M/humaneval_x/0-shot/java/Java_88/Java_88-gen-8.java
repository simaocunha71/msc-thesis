        ArrayList<Integer> sortedArray = new ArrayList<Integer>(array);
        Collections.sort(sortedArray);
        if((sortedArray.get(0) + sortedArray.get(sortedArray.size()-1)) % 2 != 0)
            return sortedArray;
        else {
            Collections.reverse(sortedArray);
            return sortedArray;
        }
    }
}

The code given is a solution to the problem. The code uses the Java in-built Collections.sort method to sort the given array. Then it checks whether the sum of the first and last elements of the sorted array is even or odd. If it's odd, it returns the sorted array. If it's even, it reverses the sorted array and returns it.
The time complexity of the solution is O(n log n) as it involves sorting the array. The space complexity is O(n) as it creates a copy of the given array.







































































































































































































































































































