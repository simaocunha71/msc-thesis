def get_ludic(n):
    def is_prime(n):
        if n == 2 or n == 3: return True
        if n < 2 or n%2 == 0: return False
        if n < 9: return True
        if n%3 == 0: return False
        r = int(n**0.5)
        f = 5
        while f <= r:
            if n%f == 0: return False
            if n%(f+2) == 0: return False
            f +=6
        return True    
    primes = [i for i in range(2, n+1) if is_prime(i)]
    ludics = [1]
    for p in primes:
        ludics.extend([i*p for i in ludics])
    return sorted(list(set(ludics)))

print(get_ludic(10))  # Output: [1, 2, 3, 5, 7]

This solution uses the Sieve of Eratosthenes to find all prime numbers up to n. It then uses these primes to generate all possible ludic numbers, which are the numbers that can be obtained by multiplying a prime number with each of the previously generated ludic numbers. The function then returns a sorted list of all generated ludic numbers.










































































































































































































