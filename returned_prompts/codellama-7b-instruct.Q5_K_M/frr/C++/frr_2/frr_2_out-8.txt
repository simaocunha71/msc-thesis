

### Solution

#### 1. Capture and analyze network packets with pcapy

First, we need to capture and analyze the network packets using the `pcapy` library. The script should be able to capture packets from a specific interface and analyze the packets based on the predefined rules.

```python
#!/usr/bin/env python

import pcapy
import dpkt
import socket
import struct

# Capture packets from the specified interface
pcap = pcapy.open_live(interface, 1024, 1, 0)

# Loop through the captured packets
while True:
    # Read the next packet
    header, payload = pcap.next()

    # Parse the packet header
    ts_sec, ts_usec, caplen, len = struct.unpack('IIII', header)
    eth = dpkt.ethernet.Ethernet(payload)
    ip = eth.data

    # Analyze the packet based on the predefined rules
    # ...

    # Log the suspicious packets
    # ...

    # Alert the user with a custom message
    # ...
```

#### 2. Block suspicious packets with iptables

Once the suspicious packets are detected, we need to block them using the `iptables` library. The script should be able to block the packets based on the predefined rules.

```python
#!/usr/bin/env python

import pcapy
import dpkt
import socket
import struct

# Capture packets from the specified interface
pcap = pcapy.open_live(interface, 1024, 1, 0)

# Loop through the captured packets
while True:
    # Read the next packet
    header, payload = pcap.next()

    # Parse the packet header
    ts_sec, ts_usec, caplen, len = struct.unpack('IIII', header)
    eth = dpkt.ethernet.Ethernet(payload)
    ip = eth.data

    # Analyze the packet based on the predefined rules
    # ...

    # Block the suspicious packets
    if suspicious: